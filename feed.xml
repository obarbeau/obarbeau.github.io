<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://blogawesome.com/' rel='self' type='application/rss+xml'/>
<title>
Wiaa
</title>
<link>
http://blogawesome.com/
</link>
<description>
Blog about Clojure and various thoughts.
</description>
<lastBuildDate>
Fri, 13 May 2016 17:35:53 +0200
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://blogawesome.com/posts-output/2015-02-18-clojure-plugins-tools/
</guid>
<link>
http://blogawesome.com/posts-output/2015-02-18-clojure-plugins-tools/
</link>
<title>
Clojure - Plugins &amp; tools
</title>
<description>
&lt;p&gt;This is my modest contribution to the &lt;a href='https://github.com/technomancy/leiningen/wiki/Plugins' target='_blank'&gt;plugins universe&lt;/a&gt; of Leiningen. I synthesized here some of my observations and comments, as others have already done &lt;a href='http://jakemccrary.com/blog/2015/01/11/overview-of-my-leiningen-profiles-dot-clj/' target='_blank'&gt;here&lt;/a&gt; and &lt;a href='http://www.corfield.org/blog/post.cfm/insanely-useful-leiningen-plugins' target='_blank'&gt;there&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I highly recommand to try and adopt the following plugins and tools.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;plugins&quot;&gt;&lt;/a&gt;Plugins&lt;/h2&gt;&lt;p&gt;There are two ways to add a plugin:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;globally in &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt;.  The plugin will be available for all projects.&lt;/li&gt;&lt;li&gt;For a particular project, in its &lt;code&gt;project.clj&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Keep in mind that all plugins specified in &lt;code&gt;profiles.clj&lt;/code&gt; and thus loaded at the same time than the REPL may interfere with it, because they affect the initial classpath, which is different from the project classpath. {: .notice}&lt;/p&gt;&lt;p&gt;&amp;#x2799; I recommend to add these plugins directly in projects (&lt;code&gt;project.clj&lt;/code&gt;) when required.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;check&amp;#95;out&amp;#95;updates&quot;&gt;&lt;/a&gt;Check out updates&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;xsc/lein-ancient&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Check for outdated dependencies and plugins.&lt;/p&gt;&lt;p&gt;It can also update the &lt;code&gt;project.clj&lt;/code&gt; and &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; files, automatically or interactively.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;lein ancient &amp;#91;upgrade :interactive&amp;#93;

lein ancient &amp;#91;upgrade-&amp;#93;profiles
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;div class=&quot;alert alert-warning&quot;&gt; &lt;i class=&quot;fa fa-warning&quot;&gt;&lt;/i&gt; Warning! The plugin does not manage utf8 correctly, so data can be corrupted, for example if you have a special REPL prompt. &lt;/div&gt;&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;tests&amp;#95;&amp;&amp;#95;benchmarks&quot;&gt;&lt;/a&gt;Tests &amp; benchmarks&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;criterium&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Benchmarks.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;'static&amp;#95;code&amp;#95;analyzers'&amp;#95;&amp;&amp;#95;'clojure&amp;#95;lint&amp;#95;tools'&quot;&gt;&lt;/a&gt;'Static code analyzers' &amp; 'Clojure lint tools'&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;jonase/kibit&lt;/code&gt;, &lt;code&gt;lein-bikeshed&lt;/code&gt;, &lt;code&gt;jonase/eastwood&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Kibit&lt;/code&gt; is written with &lt;code&gt;core.logic&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A plugin for LightTable is also available: &lt;code&gt;danielribeiro/LightTableKibit&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-expectations&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Leiningen plugin for running tests written using the expectations library.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;pedandic&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A Leiningen plugin to reject dependency graphs with common user surprises. I can't get the v0.0.5 to work.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;documentation&quot;&gt;&lt;/a&gt;Documentation&lt;/h3&gt;&lt;h4&gt;&lt;a name=&quot;consult&quot;&gt;&lt;/a&gt;Consult&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;clj-ns-browser.sdoc&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Displays in an external browser available docs for namespaces, functions, ...&lt;/p&gt;&lt;p&gt;Can be injected in the REPL with &lt;code&gt;im.chit/vinyasa&lt;/code&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a name=&quot;generate&quot;&gt;&lt;/a&gt;Generate&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;gdeer81/lein-marginalia&lt;/code&gt; et &lt;code&gt;michaelblume/lein-marginalia&lt;/code&gt; (clj 1.7+)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Use &lt;code&gt;lein marg &amp;lt;options&amp;gt;&lt;/code&gt; in the project's root directory. Generates &lt;code&gt;docs/uberdoc.html&lt;/code&gt;. On the left of the page, text from comments and docstrings, on the right the Clojure code.&lt;/p&gt;&lt;p&gt;Markdown and asciidoc formats can be used in docstrings and in standards comments (must put two &lt;code&gt;;&lt;/code&gt; to enable).&lt;/p&gt;&lt;p&gt;You can also insert mathematical formulas. Put in the beginning of the clojure source:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;;; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;
;;  src=&amp;quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML&amp;#95;HTMLorMML&amp;quot;&amp;gt;
;; &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then use one of the two notations (inline or not):&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;\\&amp;#40;r&amp;#94;2 = x&amp;#94;2 + y&amp;#94;2\\&amp;#41;
or
$$r&amp;#94;2 = x&amp;#94;2 + y&amp;#94;2$$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This plugin does not work when the project's description is written as&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:description &amp;#40;str &amp;quot;xx&amp;quot;
                  &amp;quot;yy&amp;quot;&amp;#41;
 &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;codox&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Generating API documentation from Clojure source code. The default css is somewhat austere, blue text on gray background.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Cross Reference All the Things&lt;/em&gt; with &lt;code&gt;&amp;quot;Document &amp;#91;&amp;#91;module.submodule/var&amp;#93;&amp;#93;&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Hide Auto-Generated Record Constructors&lt;/em&gt; eg for records, with &lt;code&gt;MyRecord&lt;/code&gt;, we automatically get &lt;code&gt;-&amp;gt;MyRecord &amp;amp; map-&amp;gt;MyRecord&lt;/code&gt;. &lt;code&gt;&amp;#40;alter-meta! #'-&amp;gt;RecordName assoc :no-doc true&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-autodoc&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Generates documentation for a project. The v0.9 does not work well with Leiningen 2 and the v1.0 is not yet published.&lt;/p&gt;&lt;h3&gt;&lt;a name=&quot;other&amp;#95;plugins&quot;&gt;&lt;/a&gt;Other plugins&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;clj-ns-browser&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Can be injected in the REPL with &lt;code&gt;im.chit/vinyasa&lt;/code&gt;. Launch a complete 'explorer' of functions and var available in the namespaces.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;clj-stacktrace&lt;/code&gt; and &lt;code&gt;io.aviso/pretty&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Nice exceptions with colorful stack trace. The stack from &lt;code&gt;aviso&lt;/code&gt; is easier to read than the one from &lt;code&gt;clj-stacktrace&lt;/code&gt;. The original &lt;code&gt;&amp;#40;pst&amp;#41;&lt;/code&gt; command can be overrided in a profile's injections.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;clojure.stacktrace/print-stack-trace &amp;#42;e&amp;#41;
or
&amp;#40;io.aviso.exception/write-exception &amp;#42;e&amp;#41;
or
&amp;#40;clj-stacktrace.repl/pst+&amp;#41;

to display last exception
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;im.chit/vinyasa&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Injects functions in namespaces. See &lt;a href=&quot;http://z.caudate.me/a-more-refined-vinyasa-inject&quot;&gt;http://z.caudate.me/a-more-refined-vinyasa-inject&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-autoreload&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Reloads modified sources (and thus namespaces) in the REPL. Does not work well with ClojureScript projects whose sources are in &lt;code&gt;src/clj&lt;/code&gt; and &lt;code&gt;src/cljs&lt;/code&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;emezeske/lein-cljsbuild&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Leiningen plugin to make ClojureScript development easy.&lt;/p&gt;&lt;p&gt;Mandatory for ClojureScript dev!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;the-kenny/lein-deps-tree&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Prints a print a nicely formatted tree of a project's dependencies.&lt;/p&gt;&lt;p&gt;I do not really see the difference with the &lt;code&gt;lein deps: tree&lt;/code&gt; command. Maybe the way to retrieve dependencies (aether, other)?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-light-nrepl&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Allows LightTable to communicate with an external REPL. Options can be specified (port, middleware, ...). Very useful, because I find the evaluation inside LightTable not very convenient for collections.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;marick/lein-midje&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Runs both Midje and clojure.test tests.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-ns-dep-graph&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Shows the namespace dependencies of Clojure project sources as a graph. Uses Graphviz.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-pdo&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Higher-order task to perform other tasks in parallel.&lt;/p&gt;&lt;p&gt;Several tasks can be launched with only one command, without interblocking.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;xeqi/lein-pedantic&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Reject dependency graphs with common user surprises.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-plz&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add Leiningen dependencies quickly to the &lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The dependencies can possibly be grouped into logical blocks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-pprint&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Pretty-print a representation of the project map.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;weavejester/lein-ring&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Manage &lt;code&gt;ring&lt;/code&gt; with command line: start and stop sever, generate uberwar, ...&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;lein ring uberwar # standalone version, directly in shell
lein ring war # for use with an app server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options in the &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:ring {:handler try-atw-om.core/app
       :init try-atw-om.core/init}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then inside shell: &lt;code&gt;ring server-headless &amp;lt;port&amp;gt;&lt;/code&gt; (does not start a browser)&lt;/p&gt;&lt;p&gt;A jar file for standalone deployment can be packaged and started with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;lein ring uberjar; java -jar &amp;lt;project&amp;gt;-&amp;lt;version&amp;gt;-standalone.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A war file that will deploy into an existing tomcat with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;lein ring war
or
lein ring uberwar ; all dependencies included
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-try&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To try libs without even creating a project.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;LonoCloud/lein-voom&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Helps you clean up your dependency tree.&lt;/p&gt;&lt;p&gt;Especially useful when you have snapshot versions.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;org.timmc/nephila&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Show a graph of your Clojure namespaces.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;slamhound&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;(Re)compute automatically requires and imports.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;slamhound&lt;/code&gt; alias is available for the shell but this tools can also be launched within a REPL:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;require '&amp;#91;slam.hound&amp;#93;&amp;#41;
&amp;#40;slam.hound/-main &amp;quot;src/my/namespace.clj&amp;quot;&amp;#41;
&amp;#40;slam.hound/-main &amp;quot;src&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a name=&quot;tools&quot;&gt;&lt;/a&gt;Tools&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;aprint&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Improved &lt;code&gt;print&lt;/code&gt; display.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;taoensso.timbre&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Excellent logging library. Use &lt;code&gt;timbre&lt;/code&gt; rather than &lt;code&gt;&amp;#40;def ppr #'clojure.pprint/pprint&amp;#41;&lt;/code&gt;. The timbre config is shared amongst namespaces.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;daveray/seesaw&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Seesaw&lt;/code&gt; easily create everything you need for a Swing application.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;standalone&amp;#95;scripts&quot;&gt;&lt;/a&gt;Standalone Scripts&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-exec&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add this profile the the &lt;code&gt;:user&lt;/code&gt; profile in your &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; config file.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:plugins &amp;#91;&amp;#91;lein-exec &amp;quot;0.3.1&amp;quot;&amp;#93;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then &lt;code&gt;lein exec standalone.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;With mini scripts &lt;code&gt;lein-exec&amp;#40;-p&amp;#41;&lt;/code&gt; it is possible to use &lt;code&gt;#!/bin/bash lein-exec&amp;#40;-p&amp;#41;&lt;/code&gt; directly in file's header.&lt;/p&gt;&lt;h2&gt;&lt;a name=&quot;boot&quot;&gt;&lt;/a&gt;Boot&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget https://clojars.org/repo/tailrecursion/boot/1.1.1/boot-1.1.1.jar
mv boot-1.1.1.jar boot
chmod a+x boot
mv boot &amp;#126;/bin/boot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Immutable File System -&gt; boot task -&gt; boot task2 -&gt; ...&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 18 Feb 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-02-09-uberjar-and-clojurescript/
</guid>
<link>
http://blogawesome.com/posts-output/2015-02-09-uberjar-and-clojurescript/
</link>
<title>
Uberjar with ClojureScript
</title>
<description>
&lt;p&gt;Today I wanted to deploy a &lt;code&gt;ring&lt;/code&gt; project with a ClojureScript part.&lt;/p&gt;&lt;p&gt;Deployment is done with an uberjar, which I find effective. I use an additional directory to separate the sources, which are located in &lt;code&gt;src/clj/ns&lt;/code&gt; and &lt;code&gt;src/cljs/ns&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So, during the compilation, &lt;code&gt;lein&lt;/code&gt; complains it could not locate the namespace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;...FileNotFoundException: Could not locate ns/main&amp;#95;&amp;#95;init.class ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason is that the standard content of the &lt;code&gt;source-paths&lt;/code&gt; option, which is usually &lt;code&gt;src/ns&lt;/code&gt;, is no more suitable. So I changed the &lt;code&gt;uberjar&lt;/code&gt; profile in order to specify the different structure of the source directories.&lt;/p&gt;&lt;p&gt;Firstly, the &lt;code&gt;sources-level-down&lt;/code&gt; profile shown below replaces the standard content of the &lt;code&gt;source-paths&lt;/code&gt;. I found a tip on the Leiningen site to define profiles overrides. It therefore allows to include this kind of source paths only for projects with ClojureScript:&lt;/p&gt;&lt;p&gt;Once, in the &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:sources-level-down {:source-paths &amp;#94;:replace &amp;#91;&amp;quot;src/clj&amp;quot; &amp;quot;src/cljs&amp;quot;&amp;#93;}

:uberjar-common {:aot :all
                 &amp;lt;other options&amp;gt;}
:uberjar-additional {} ; nothing by default
:uberjar &amp;#91;:uberjar-common :uberjar-additional&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In every ClojureScript projects, in their &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;; overrides profile to include new `source-path` definition
:profiles {:uberjar-additional &amp;#91;:sources-level-down&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember that the JavaScript compilation will not be automatic during the uberjar build.&lt;/p&gt;&lt;p&gt;No doubt a hook can be added to the workflow, but in the meantime I recommend using &lt;a href='https://github.com/oakmac/cuttle' target='_blank'&gt;cuttle&lt;/a&gt;, defined itself as an &lt;i&gt;User Interface for the ClojureScript Compiler&lt;/i&gt;, to keep an eye on the JS compilation status.&lt;/p&gt;&lt;p&gt;Happy uberjar!&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 09 Feb 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-02-05-dashboard-part2/
</guid>
<link>
http://blogawesome.com/posts-output/2015-02-05-dashboard-part2/
</link>
<title>
Dashboard, part 2
</title>
<description>
&lt;p&gt;After a break for more important projects, I'm back on the dashboard project. Since the first version was working fine, I decided to redo everything, according to a well-known principle in application development...&lt;/p&gt;&lt;p&gt;I replaced vanilla JavaScript by ClojureScript, and Ajax calls on &lt;code&gt;Compojure&lt;/code&gt; routes (to retrieve data) by &lt;code&gt;core.async&lt;/code&gt; on a &lt;code&gt;websocket&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I had previously used on another project websockets with &lt;code&gt;httpkit&lt;/code&gt; and &lt;code&gt;webbitserver&lt;/code&gt;. It was working on two different ports, and management (and building) of websocket brought a lot of boilerplate.&lt;/p&gt;&lt;p&gt;It was also necessary to convert data to json with &lt;code&gt;cheshire&lt;/code&gt; on the server side and Javascript functions on the front side.&lt;/p&gt;&lt;p&gt;For websockets I started using &lt;a href='https://github.com/ptaoussanis/sente' target='_blank'&gt;sente&lt;/a&gt;, which seemed to meet my needs perfectly. This library is from the same author than the excellent logging library &lt;code&gt;timbre&lt;/code&gt;. Alas, a version conflicts and a recalcitrant macro prevented me from using it.&lt;/p&gt;&lt;p&gt;So I focused my attention on &lt;a href='https://github.com/james-henderson/chord' target='_blank'&gt;chord&lt;/a&gt;. Same core functionality than &lt;code&gt;sente&lt;/code&gt;. The merge with the Compojure routes is done with the &lt;code&gt;wrap-websocket-handler&lt;/code&gt; wrapper; the &lt;code&gt; transit&lt;/code&gt; format is default, so everything is perfect.&lt;/p&gt;&lt;p&gt;There's no need anymore to worry about the &lt;code&gt;onOpen&lt;/code&gt;, &lt;code&gt;onClose&lt;/code&gt; and &lt;code&gt;onMessage&lt;/code&gt; methods of the websocket, everything is automatic. It lets the user focus on data to transit the ws-channel, with &lt;code&gt;core.async&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;. And of course all is done without having to explicitly convert the data to json.&lt;/p&gt;&lt;p&gt;On the front side, I use &lt;a href='https://github.com/levand/domina' target='_blank'&gt;domina&lt;/a&gt;, which allows me to easily manipulate the elements of the page as well as events.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Thu, 05 Feb 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-01-26-link-with-editor/
</guid>
<link>
http://blogawesome.com/posts-output/2015-01-26-link-with-editor/
</link>
<title>
Link with editor
</title>
<description>
&lt;p&gt;I released a very simple LightTable plugin that highlight in the &lt;code&gt;Workspace&lt;/code&gt; view the file currently edited. The sources are available on my &lt;a href='https://github.com/obarbeau/lt-link-with-editor' target='_blank'&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It has been build upon the &lt;a href='https://github.com/mdhaney/lt-plugin-template' target='_blank'&gt;&lt;code&gt;mdhaney/lt-plugin-template&lt;/code&gt;&lt;/a&gt;, with the lein command: &lt;code&gt;lein new lt-plugin link-with-editor&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;This template generates the same structure and files than those in the &lt;code&gt;&amp;#126;.config/LightTable/User&lt;/code&gt; directory, which is the default user plugin namespace.&lt;/p&gt;&lt;p&gt;I suggest to symlink the project's directory to the Light Table plugin dir &lt;code&gt;&amp;#126;/.config/LightTable/plugins/&lt;/code&gt;. Thus, by running the commands &lt;code&gt;Plugins: Refresh plugin list&lt;/code&gt; then &lt;code&gt;App: reload behaviors&lt;/code&gt;, your plugin is available and ready to test inside Light Table.&lt;/p&gt;&lt;p&gt;Then, running &lt;code&gt;Editor: Build file or project&lt;/code&gt; recompiles the Javascript file. One can also connect to &lt;code&gt;Light Table UI&lt;/code&gt;. Any change made in the source files is taken into account automatically.&lt;/p&gt;&lt;p&gt;Don't forget to open the LT console because all output (via &lt;code&gt;println&lt;/code&gt;) are redirected here.&lt;/p&gt;&lt;p&gt;Finally the &lt;a href='https://github.com/LightTable/LightTable/tree/master/src/lt' target='_blank'&gt;LT's GitHub&lt;/a&gt; is mandatory for discovering useful namespaces, behaviors and commands for your plugin.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Mon, 26 Jan 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-01-20-dashboard/
</guid>
<link>
http://blogawesome.com/posts-output/2015-01-20-dashboard/
</link>
<title>
Dashboard
</title>
<description>
&lt;p&gt;Since three days I work on a dashboard that will display statistics in the form of tables and graphs.&lt;/p&gt;&lt;p&gt;I am using with great pleasure the following tools:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/ring-clojure/ring' target='_blank'&gt;ring&lt;/a&gt; for the server,&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/weavejester/compojure' target='_blank'&gt;compojure&lt;/a&gt; for the  routing,&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/weavejester/hiccup' target='_blank'&gt;hiccup&lt;/a&gt; for dynamic generation of html pages,&lt;/li&gt;&lt;li&gt;also &lt;a href='https://github.com/mbossenbroek/simple-time' target='_blank'&gt;simple-time&lt;/a&gt; for handling dates,  I found it to be more lightweight and concise as  &lt;a href='https://github.com/clj-time/clj-time' target='_blank'&gt;clj-time&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thanks to the &lt;code&gt;ring.middleware.reload&lt;/code&gt; middleware and the tip which is to set in ring the compojure's routes as a var quote (&lt;code&gt;#'app-routes&lt;/code&gt;), every modification made in the code is taken into account without the need to reload the namespace in the REPL.&lt;/p&gt;&lt;p&gt;I have not yet chosen between Dimple.js and Epoch for the display part.&lt;/p&gt;&lt;p&gt;Finally, &lt;a href='https://github.com/joegallo/doric' target='_blank'&gt;doric&lt;/a&gt; helps me to show my data in chart form in the REPL, which is appreciable.&lt;/p&gt;&lt;p&gt;Of course the IDE I use is &lt;a href='http://lighttable.com/' target='_blank'&gt;Light Table&lt;/a&gt;, a must :-)&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 20 Jan 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-01-16-flat-cable-earphones/
</guid>
<link>
http://blogawesome.com/posts-output/2015-01-16-flat-cable-earphones/
</link>
<title>
Flat Cable Earphones
</title>
<description>
&lt;p&gt;The last time that I went to the market, I lost my earphone. I bought some smoked haddock that day, which has proved very good, but this is not the subject of this post.&lt;/p&gt;&lt;p&gt;In order to continue to listen to Opeth, Marillion and Kamelot in the bus that brings me to work, I bought a &lt;em&gt;Klipsch Image S4&lt;/em&gt; earphone. The sound is very good, with powerful and satisfactory bass.&lt;/p&gt;&lt;p&gt;One silly thing and yet very pleasant, are the flat cables, which do not intertwine. It is a pleasure every morning to quickly be able to listen to his music, without losing 10 minutes to curse the ball of yarn.&lt;/p&gt;&lt;p&gt;By looking for the link on the site of the manufacturer, I realize that this earphone is already no more sold, and that he has been replaced by &lt;a href='http://www.klipsch.com/R6i' target='_blank'&gt;this one&lt;/a&gt;.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Fri, 16 Jan 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-01-14-moving-git-repo-to-github/
</guid>
<link>
http://blogawesome.com/posts-output/2015-01-14-moving-git-repo-to-github/
</link>
<title>
Moving Git repo to GitHub
</title>
<description>
&lt;p&gt;Today I pushed my &lt;a href='https://github.com/obarbeau/repl-tasks' target='_blank'&gt;&lt;code&gt;repl-tasks&lt;/code&gt;&lt;/a&gt; project to GitHub, whose repository was previously on a personal &lt;a href='https://www.synology.com/' target='_blank'&gt;Synology&lt;/a&gt; server.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# add the new repo on GitHub
git remote add new-origin git@github.com:obarbeau/repl-tasks.git
# push everything
git push --all new-origin
git push --tags new-origin
# rename old syno repo
git remote rename origin previous-on-syno
# rename new repo to master
git remote rename new-origin origin
# change destination of local master branch to new repo
git branch master --set-upstream-to=origin/master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The history is preserved. If some branches had existed, it would have been necessary to pull them first to the local repo and then push them to the new one. See this &lt;a href='http://www.smashingmagazine.com/2014/05/19/moving-git-repository-new-server/' target='_blank'&gt;post&lt;/a&gt; for more information.&lt;/p&gt;&lt;p&gt;This project needs some refactoring and documentation, I'll do it ASAP...&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Wed, 14 Jan 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://blogawesome.com/posts-output/2015-01-13-cleaning-day/
</guid>
<link>
http://blogawesome.com/posts-output/2015-01-13-cleaning-day/
</link>
<title>
Cleaning day
</title>
<description>
&lt;p&gt;I just spent the morning to sort paper records that were sleeping over my office box. I should say throwing them, because indeed the trash is now overflowing. I kept very little documentation.&lt;/p&gt;&lt;p&gt;Finally all these paper records have little interest. Most are intermediate versions of documents; so there are 'final' versions elsewhere, often electronic ones. When looking at those files one takes the 'risk' to miss the latest information.&lt;/p&gt;&lt;p&gt;Others are printed emails, which are anyway stored in the mail box.&lt;/p&gt;&lt;p&gt;Finally, the rest are outdated notes or whose ideas were echoed elsewhere.&lt;/p&gt;&lt;p&gt;I only kept the documents relating to actions actually in progress, or whose notes have not been written in electronic form, as well as original bills.&lt;/p&gt;&lt;p&gt;Zero paper is on track.&lt;/p&gt;
</description>
<enclosure>

</enclosure>
<pubDate>
Tue, 13 Jan 2015 00:00:00 +0100
</pubDate>
</item>
</channel>
</rss>
