<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://bleu-barbeau.com/' rel='self' type='application/rss+xml'/>
<title>
Bleu Barbeau - The world in an atom
</title>
<link>
http://bleu-barbeau.com/
</link>
<description>
Blog about Clojure and various thoughts.
</description>
<lastBuildDate>
Mon, 27 May 2019 21:49:36 +0200
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
http://bleu-barbeau.com/posts/2016-07-20-classpath-and-test-scope/
</guid>
<link>
http://bleu-barbeau.com/posts/2016-07-20-classpath-and-test-scope/
</link>
<title>
Classpath and 'test' scope
</title>
<description>
&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;&lt;p&gt;Leiningen uses the Maven library under the hood, to manage dependencies. As a consequence, the &lt;code&gt;dependency scope&lt;/code&gt; mechanism is used to affect the classpath.&lt;/p&gt;&lt;p&gt;The default, &lt;code&gt;compile&lt;/code&gt;, is never explicitly specified.&lt;/p&gt;&lt;p&gt;The two mainly used scopes are &lt;code&gt;provided&lt;/code&gt; (for the famous &lt;code&gt;javax.servlet/servlet-api&lt;/code&gt; when working with Java EE servers...) and &lt;code&gt;test&lt;/code&gt;, in order to point out that the dependency is for tests only.&lt;/p&gt;&lt;p&gt;Neither is transitive (brings no other deps), and the &lt;code&gt;test&lt;/code&gt; one is not required for normal use of the application.&lt;/p&gt;&lt;p&gt;I'd like to get my project's classpath, the one required at runtime.&lt;/p&gt;&lt;p&gt;And I find annoying that 'test dependencies' are contained in this path.&lt;/p&gt;&lt;h2 id=&quot;first&amp;#95;try&quot;&gt;First try&lt;/h2&gt;&lt;p&gt;I start a REPL with &lt;a href='/posts/2016-07-15-leiningen-profiles' target='_blank'&gt;custom profiles&lt;/a&gt;: &lt;code&gt;lein with-profiles +local,+cljs,+om repl&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Let's see what &lt;code&gt;&amp;#40;System/getProperty &amp;quot;java.class.path&amp;quot;&amp;#41;&lt;/code&gt; gives us.&lt;/p&gt;&lt;p&gt;omg! It returns all dependencies, including 'test' ones, and also those of every profiles used to launch the REPL...&lt;/p&gt;&lt;p&gt;What a mess!&lt;/p&gt;&lt;h2 id=&quot;using&amp;#95;thread&quot;&gt;Using Thread&lt;/h2&gt;&lt;p&gt;Several solutions equivalent to this one hang out in internet:&lt;/p&gt;&lt;p&gt;&lt;code&gt;&amp;#40;seq &amp;#40;.. Thread currentThread getContextClassLoader getURLs&amp;#41;&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;but with recent &lt;code&gt;lein&lt;/code&gt; versions, it displays &lt;code&gt;nil&lt;/code&gt;...&lt;/p&gt;&lt;h2 id=&quot;using&amp;#95;lein&quot;&gt;Using lein&lt;/h2&gt;&lt;p&gt;Outside of the REPL, there is a &lt;code&gt;lein classpath&lt;/code&gt; task.&lt;/p&gt;&lt;p&gt;This task simply wraps a function located in the &lt;code&gt;leiningen.core.classpath&lt;/code&gt; namespace.&lt;/p&gt;&lt;p&gt;As with the other tries, it also gives the full classpath with tests dependencies. But it reads dependencies from the &lt;code&gt;project.clj&lt;/code&gt; file, so there is no interference with optional profiles nor plugins.&lt;/p&gt;&lt;p&gt;So, we'll filter dependencies before passing the project's map to this function.&lt;/p&gt;&lt;h3 id=&quot;step&amp;#95;1:&amp;#95;leiningen-core&quot;&gt;Step 1: leiningen-core&lt;/h3&gt;&lt;p&gt;Add a dependency to your project's map file: &lt;code&gt;project.clj&lt;/code&gt;, If your &lt;code&gt;&amp;#42;read-eval&amp;#42;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; you might use the following notation:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;   :dependencies &amp;#91;...
                 &amp;#91;leiningen-core #=&amp;#40;leiningen.core.main/leiningen-version&amp;#41;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Thus the same version of Leningen than the one used to start the REPL will be used.&lt;/p&gt;&lt;p&gt;If that does not work, go back to basics:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;   :dependencies &amp;#91;...
                 &amp;#91;leiningen-core &amp;quot;2.6.1&amp;quot;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step&amp;#95;2:&amp;#95;require&quot;&gt;Step 2: require&lt;/h3&gt;&lt;p&gt;In the REPL session, type: &lt;code&gt;&amp;#40;require '&amp;#91;leiningen.core.classpath :as lcc&amp;#93;&amp;#41;&lt;/code&gt; to be able to use the &lt;code&gt;get-classpath&lt;/code&gt; function.&lt;/p&gt;&lt;p&gt;Also &lt;code&gt;&amp;#40;require '&amp;#91;leiningen.core.main :refer &amp;#91;leiningen-version&amp;#93;&amp;#93;&amp;#41;&lt;/code&gt;  to let the &lt;code&gt;leiningen-version&lt;/code&gt; seen above return the correct number.&lt;/p&gt;&lt;h3 id=&quot;step&amp;#95;3:&amp;#95;dependency&amp;#95;notation&quot;&gt;Step 3: dependency notation&lt;/h3&gt;&lt;p&gt;&lt;div class=&quot;alert alert-success&quot;&gt; &lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt; &amp;nbsp;A dependency, as added to any project file, is a vector with at least the artifact name (group-id/name coordinate) and its version (version will become optional with managed-dependencies, see last paragraph). Some modifiers might be added, such as &lt;code&gt;:exclusions&lt;/code&gt;, &lt;code&gt;:classifier&lt;/code&gt;, or &lt;code&gt;:scope&lt;/code&gt;, as pairs of key/value. &lt;/div&gt;&lt;/p&gt;&lt;p&gt;Examples:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:dependencies &amp;#91;&amp;#91;org.clojure/clojure              &amp;quot;1.8.0&amp;quot;&amp;#93;

               &amp;#91;leiningen-core
                #=&amp;#40;leiningen.core.main/leiningen-version&amp;#41;&amp;#93;

               &amp;#91;clojurewerkz/propertied          &amp;quot;1.2.0&amp;quot;
                           :exclusions &amp;#91;&amp;#91;clojurewerkz/support&amp;#93;&amp;#93;&amp;#93;

               &amp;#91;midje/midje                      &amp;quot;1.8.3&amp;quot; :scope &amp;quot;test&amp;quot;&amp;#93;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;step&amp;#95;4:&amp;#95;assembly&quot;&gt;Step 4: assembly&lt;/h3&gt;&lt;p&gt;If the value of the &lt;code&gt;scope&lt;/code&gt; modifier is &lt;code&gt;&amp;quot;test&amp;quot;&lt;/code&gt;, we will remove the dependency.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;; read project's file and call get-classpath with updated dependencies
&amp;#40;defn classpath-without-test-deps &amp;#91;&amp;#93;
  &amp;#40;let &amp;#91;pmap &amp;#40;leiningen.core.project/read &amp;quot;project.clj&amp;quot;&amp;#41;&amp;#93;
    &amp;#40;leiningen.core.classpath/get-classpath
      ; filter project's dependencies before getting classpath.
      &amp;#40;update pmap
              :dependencies
              &amp;#40;fn &amp;#91;deps&amp;#93;
                &amp;#40;filter &amp;#40;fn &amp;#91;dep&amp;#93;
                          &amp;#40;as-&amp;gt; dep $$
                                &amp;#40;drop-while #&amp;#40;not= :scope %&amp;#41; $$&amp;#41;
                                &amp;#40;second $$&amp;#41;
                                &amp;#40;or $$ &amp;quot;&amp;quot;&amp;#41;
                                &amp;#40;name $$&amp;#41;
                                &amp;#40;not= &amp;quot;test&amp;quot; $$&amp;#41;&amp;#41;&amp;#41; deps&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As a bonus, missing deps will be downloaded into your maven repo.&lt;/p&gt;&lt;h3 id=&quot;step&amp;#95;5:&amp;#95;cleaning&quot;&gt;Step 5: cleaning&lt;/h3&gt;&lt;p&gt;It is not desirable to permanently change the dependencies of a project to add &lt;code&gt;leiningen-core&lt;/code&gt; for this very specific need.&lt;/p&gt;&lt;p&gt;Several solutions are possible:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;add in the project file an entry of the type:&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:profiles {
  :dev {:dependencies &amp;#91;&amp;#91;leiningen-core &amp;quot;2.6.1&amp;quot;&amp;#93;&amp;#93;}
&lt;/li&gt;&lt;/ol&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will set a profile used only in development mode,  which will not pollute the standard project dependencies.  We can take the opportunity to add a few plugins also,  like &lt;code&gt;michaelblume/lein-marginalia&lt;/code&gt; to generate a nice project documentation.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;create a profile common for all projects (user-wide or system-wide) in the &lt;code&gt;profiles.clj&lt;/code&gt; configuration file. In this case, the profile should not be called &lt;code&gt;dev&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;use a packaged library such as &lt;code&gt;repl-tasks&lt;/code&gt;, and inject   useful functions in the &lt;code&gt;clojure-core&lt;/code&gt; namespace. See &lt;a href='/posts/2016-07-15-leiningen-profiles' target='_blank'&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;managed&amp;#95;dependencies&quot;&gt;Managed dependencies&lt;/h2&gt;&lt;p&gt;Leiningen 2.6.2 will bring a very interesting new feature: managed dependencies. They allow to declare the version of some dependencies in a 'parent' project, and to propagate automatically in child projects. Those coming from Java and Maven's world remember about parent pom and cie.&lt;/p&gt;&lt;p&gt;Small problem, the scope should be set in these &lt;code&gt;managed-dependencies&lt;/code&gt;. So to benefit from this new feature, we'll have to look at both the project deps and those of its optional parent to be able to detect a 'test' scope.&lt;/p&gt;&lt;p&gt;So stay tuned for an update to this post, as soon as lein 2.6.2 is available!&lt;/p&gt;
</description>
<pubDate>
Wed, 20 Jul 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2016-07-15-leiningen-profiles/
</guid>
<link>
http://bleu-barbeau.com/posts/2016-07-15-leiningen-profiles/
</link>
<title>
Leiningen profiles and REPL enrichment
</title>
<description>
&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;&lt;p&gt;What do you do in Paris in July?&lt;/p&gt;&lt;p&gt;Sip a beer with my friend Wilfried at the terrace of a café, looking the rain falling, and waiting for the summer really begins.&lt;/p&gt;&lt;p&gt;Serious and less serious subjects follow each other...&lt;/p&gt;&lt;p&gt;There also arises the question of a good development environment for Clojure, as a continuation of our discussion when we were at &lt;a href='http://clojure.paris/' target='_blank'&gt;Paris's Clojure meetup&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In addition to the excellent pair IntelliJ Idea + Cursive, some profiles for Leiningen can greatly enhance the experience of REPL.&lt;/p&gt;&lt;h2 id=&quot;official&amp;#95;documentation&quot;&gt;Official documentation&lt;/h2&gt;&lt;p&gt;The Leiningen doc about profiles is very complete and clear. It is available &lt;a href='https://github.com/technomancy/leiningen/blob/master/doc/PROFILES.md' target='_blank'&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &lt;a href='https://github.com/technomancy/leiningen/blob/master/sample.project.clj' target='_blank'&gt;sample &lt;code&gt;project.clj&lt;/code&gt;&lt;/a&gt; file of a standard Clojure project can also give you tips about options you can configure or add in your own profiles.&lt;/p&gt;&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;&lt;p&gt;Profiles are simply maps of options, that will be applied to lein tasks. Leiningen provides few defaults and allows to complete with your own needs.&lt;/p&gt;&lt;h3 id=&quot;default&amp;#95;profiles&quot;&gt;Default profiles&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;leiningen/default&lt;/code&gt; is a compound profile, initially made of these profiles:&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;:base      brings base dependencies `org.clojure/tools.nrepl`
           and `clojure-complete` &amp;#40;completion with the `tab` key&amp;#41;
:user      will be shared amongst all clojure projects for logged user
:system    same as `:user` but applies system-wide
:provided  if you understand Maven's scope it should be the same here...
&lt;/li&gt;&lt;/ul&gt;:dev       should be defined in every `project.clj`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  It automatically loads all the specified profiles when you launch a lein task.   Without any additional custom configuration, the last 4 will be empty.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;leiningen/test&lt;/code&gt; injects some hooks for tests.&lt;/li&gt;&lt;li&gt;&lt;code&gt;update&lt;/code&gt;, &lt;code&gt;offline&lt;/code&gt; and &lt;code&gt;debug&lt;/code&gt; are three profiles that set  the corresponding 'predicate-keyword' (eg &lt;code&gt;:debug?&lt;/code&gt;)  to &lt;code&gt;true&lt;/code&gt; (ou &lt;code&gt;:always&lt;/code&gt; for &lt;code&gt;update&lt;/code&gt;). They should be merged whenever needed.&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;where&amp;#95;to&amp;#95;define&amp;#95;profiles?&quot;&gt;Where to define profiles?&lt;/h3&gt;&lt;p&gt;They are retrieved in the following order, and override or complement each other.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;/etc/leiningen/profiles.clj&lt;/code&gt; (system-wide)&lt;/li&gt;&lt;li&gt;&lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; (user specific)&lt;/li&gt;&lt;li&gt;&lt;code&gt;project.clj&lt;/code&gt; (in project's root)&lt;/li&gt;&lt;li&gt;&lt;code&gt;profiles.clj&lt;/code&gt; (in project's root)&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&quot;how&amp;#95;to&amp;#95;use&amp;#95;them?&quot;&gt;How to use them?&lt;/h3&gt;&lt;p&gt;To use only &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; profiles for the &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; task:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;   lein with-profile default,prod &amp;lt;task&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To use the specified profile(s) (order matters) in addition to the default one for the &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; task, use the &lt;code&gt;'+'&lt;/code&gt; character:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;   lein with-profile +prod,+offline,+mongodb &amp;lt;task&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This second writing is best in order to always keep &lt;code&gt;leiningen/default&lt;/code&gt; active. &lt;div class=&quot;alert alert-warning&quot;&gt; &lt;i class=&quot;fa fa-warning&quot;&gt;&lt;/i&gt; Beware however, this one is automatically disabled during the  &lt;code&gt;pom&lt;/code&gt;, &lt;code&gt;jar&lt;/code&gt; and &lt;code&gt;uberjar&lt;/code&gt; tasks, so as not to 'pollute' dependencies and compilation. &lt;/div&gt;&lt;/p&gt;&lt;p&gt;All dependencies and plugins brought in by an activated profile can indeed have an impact the final project's classpath and/or REPL invocation, so pay attention to the clashes.&lt;/p&gt;&lt;h3 id=&quot;merge&amp;#95;profiles&quot;&gt;Merge profiles&lt;/h3&gt;&lt;p&gt;The merge is performed either from the command line, as seen above, or in the definition of the profile.&lt;/p&gt;&lt;p&gt;For example, to permanently merge &lt;code&gt;offline&lt;/code&gt; and &lt;code&gt;mongodb&lt;/code&gt; profiles in the &lt;code&gt;prod&lt;/code&gt; one, just define &lt;code&gt;prod&lt;/code&gt; as a vector that references others, as follows:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:prod &amp;#91;:offline
       :mongodb
       {; now the prod profile definition
        :license ...
       }&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;custom&amp;#95;user&amp;#95;profile&quot;&gt;Custom user profile&lt;/h3&gt;&lt;p&gt;This is an annotated part of my &lt;code&gt;user&lt;/code&gt; profile, located in the &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; file, that is shared amongst all clojure projects.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt; :user
 {; if you are not fortunate enough to have an SSD in your PC,
  ; you will save time using a ramdisk for compiling classes.
  ; in this case, you will make a symlink from the 'target' directory
  ; to the ramdisk.
  ; Yet paths outside the project root cannot be accessed by `lein clean`,
  ; except if we 'deprotect' them like show: 
  :clean-targets &amp;#94;{:protect false} &amp;#91;:target-path&amp;#93;

  ; it is possible to configure any options for a tool in this profile
  ; without importing the corresponding plugin, which will be done only
  ; in projects that use it &amp;#40;in `project.clj`&amp;#41;.
  ; for example, codox is a documentation tool, we set its overall options
  ; here but don't import the plugin.
  :codox {:defaults {:doc/format :markdown}
          :writer codox.writer.html/write-docs
          ; source links
          :src-dir-uri &amp;quot;https://github.com/obarbeau/XXX/blob/master/&amp;quot;
          :src-linenum-anchor-prefix &amp;quot;L&amp;quot;}

  ; `lein release` will work only if deploy repository is named `releases`
  :deploy-repositories
  &amp;#91;&amp;#91;&amp;quot;releases&amp;quot;
    {:url &amp;quot;https://ip:8081/nexus/content/repositories/clj-releases&amp;quot;
     ; sign releases? &amp;#40;it's not about signing git commits here&amp;#41;
     :sign-releases true
     ; `sign` does not work if you must enter a pasword for the gpg key
     ; so override system's default gpg key with one that does not require
     ; a password
     :signing {:gpg-key &amp;quot;XXXXXX&amp;quot;}}&amp;#93;&amp;#93;

  :global-vars { &amp;#42;print-length&amp;#42; 30 }

  ; shared options for compilation
  :javac-options &amp;#91;&amp;quot;-target&amp;quot; &amp;quot;1.8&amp;quot; &amp;quot;source&amp;quot; &amp;quot;1.8&amp;quot; &amp;quot;-Xlint:-options&amp;quot;&amp;#93;

  ; for debugging an external REPL with eclipse or IntelliJ 
  ;:jvm-opts &amp;#91;&amp;#40;str &amp;quot;-agentlib:jdwp=transport=dt&amp;#95;socket,server=y,&amp;quot;
  ;           &amp;quot;suspend=n,address=5005&amp;quot;&amp;#41;&amp;#93;
  
  ; common options for the JVM
  :jvm-opts &amp;#91;&amp;quot;-XX:+AggressiveOpts&amp;quot; &amp;quot;-XX:+UseCompressedOops&amp;quot;
             &amp;quot;-XX:+OptimizeStringConcat&amp;quot;
             &amp;quot;-XX:+UseFastAccessorMethods&amp;quot; &amp;quot;-server&amp;quot;
             &amp;quot;-Duser.timezone=Europe/Paris&amp;quot;&amp;#93;

  ; in this `user` profile, use plugins with the less dependencies
  ; as possible
  :plugins &amp;#91;; executing Clojure scripts &amp;#40;in two words&amp;#41;
            &amp;#91;lein-exec                        &amp;quot;0.3.6&amp;quot;&amp;#93;
            ; Add leiningen dependencies quickly
            &amp;#91;lein-plz                         &amp;quot;0.3.0&amp;quot;&amp;#93;
            ; Pretty-print a representation of the project map
            &amp;#91;lein-pprint                      &amp;quot;1.1.2&amp;quot;&amp;#93; ; no dependencies
            ; trying out new libraries without creating a project
            &amp;#91;lein-try                         &amp;quot;0.4.3&amp;quot;&amp;#93;&amp;#93; ; no dependencies

  ; avoid polluting root directory with an unnecessary pom
  :pom-location &amp;quot;target/&amp;quot;

  ; a colored prompt
  :repl-options {:prompt &amp;#40;fn &amp;#91;ns&amp;#93; &amp;#40;str &amp;quot;&amp;#91;35m&amp;#91;&amp;#91;34m&amp;quot; ns &amp;quot;&amp;#91;35m&amp;#93;&amp;#91;33m λ:&amp;#91;m &amp;quot;&amp;#41;&amp;#41;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember the &lt;code&gt;dev&lt;/code&gt; profile should not be defined in the &lt;code&gt;profiles.clj&lt;/code&gt; file, but for each project.&lt;/p&gt;&lt;p&gt;I also use a &lt;code&gt;local&lt;/code&gt; profile, mainly when I launch a REPL, &lt;code&gt;lein with-profile +local repl&lt;/code&gt;, with the following content:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt; :local
 {; set your composite command line aliases here
  :aliases {; cf. the post 2015-02-18-clojure-plugins-tools
            &amp;quot;slamhound&amp;quot; &amp;#91;&amp;quot;run&amp;quot; &amp;quot;-m&amp;quot; &amp;quot;slam.hound&amp;quot;&amp;#93;}

  ; dependencies used by injections &amp;#40;see below&amp;#41;
  :dependencies &amp;#91;; awesome print for datastructure
                 &amp;#91;aprint                           &amp;quot;0.1.3&amp;quot;&amp;#93;
                 ; injections in the REPL see below
                 &amp;#91;im.chit/vinyasa                  &amp;quot;0.4.3&amp;quot;&amp;#93;
                 &amp;#91;leiningen #=&amp;#40;leiningen.core.main/leiningen-version&amp;#41;&amp;#93;
                 ; pretty print test outputs
                 &amp;#91;pjstadig/humane-test-output      &amp;quot;0.8.0&amp;quot;&amp;#93;
                 ; see https://github.com/obarbeau/repl-tasks
                 &amp;#91;repl-tasks                       &amp;quot;3.2.0&amp;quot;&amp;#93;
                 ; trace-oriented debugging tools
                 &amp;#91;spyscope                         &amp;quot;0.1.5&amp;quot;&amp;#93;
                 ; extra documentation for core functions
                 &amp;#91;thalia                           &amp;quot;0.1.0&amp;quot;&amp;#93;&amp;#93;

  ; The following code will be evaluated once at the beginning
  ; of every lein task &amp;#40;including `repl`, but excluding `jar` and `uberjar`&amp;#41;
  ; So this is like an 'init' stuff.
  :injections &amp;#91;&amp;#40;require '&amp;#91;aprint.core&amp;#93;
                        '&amp;#91;io.aviso.ansi :as ansi&amp;#93;
                        'pjstadig.humane-test-output
                        '&amp;#91;repl-tasks.core&amp;#93;
                        'spyscope.core
                        '&amp;#91;thalia.doc&amp;#93;
                        '&amp;#91;vinyasa.inject :as inject&amp;#93;&amp;#41;
               ; injects in the `clojure.core` ns &amp;#40;so it will be available
               ; from any other namespace&amp;#41;
               ; the following functions, from various specified namespaces.
               ; These functions will be callable with the '&amp;gt;' prefix.
               ; eg. &amp;#40;&amp;gt;doc f&amp;#41; will be translated to &amp;#40;clojure.repl/doc f&amp;#41;
               ; &amp;#40;&amp;gt;sh &amp;quot;ls&amp;quot;&amp;#41; will be translated to
               ;   &amp;#40;clojure.java.shell/sh &amp;quot;ls&amp;quot;&amp;#41;
               &amp;#40;inject/in
                clojure.core &amp;gt;
                &amp;#91;aprint.core aprint&amp;#93;
                &amp;#91;clojure.repl apropos dir doc find-doc pst source&amp;#93;
                &amp;#91;clojure.pprint pprint pp&amp;#93;
                &amp;#91;clojure.java.shell sh&amp;#93;
                &amp;#91;repl-tasks.core
                 check-kibit dependencies goto
                 lein-classpath lein-deploy lein-deps
                 lein-install lein-midje lein-midje-auto
                 lein-pprint lein-release lein-run lein-uberjar sdoc&amp;#93;
                &amp;#91;vinyasa.lein lein&amp;#93;
                &amp;#91;vinyasa.reflection .&amp;gt; .? .&amp;#42; .% .%&amp;gt;&amp;#93;&amp;#41;

               ; other init stuff
               &amp;#40;repl-tasks.core/check-kibit&amp;#41;
               &amp;#40;repl-tasks.core/check-cuttle&amp;#41;
               ; activate humane-test-output
               &amp;#40;pjstadig.humane-test-output/activate!&amp;#41;
               &amp;#40;println
                &amp;#40;str ansi/green-font &amp;quot;∙ &amp;#91;done&amp;#93; injections vinyasa.&amp;quot;
                     ansi/reset-font&amp;#41;&amp;#41;
               ; register extra clojure documentation
               &amp;#40;thalia.doc/add-extra-docs! :language &amp;quot;en&amp;#95;US&amp;quot;&amp;#41;
               &amp;#40;println
                &amp;#40;str ansi/green-font &amp;quot;∙ &amp;#91;done&amp;#93; extra doc.\n&amp;quot;
                     ansi/reset-font&amp;#41;&amp;#41;&amp;#93;

  ; useful plugins
  :plugins &amp;#91;&amp;#91;io.aviso/pretty                  &amp;quot;0.1.26&amp;quot;&amp;#93;
            &amp;#91;venantius/ultra                   &amp;quot;0.4.1&amp;quot;&amp;#93;&amp;#93;

  :repl-options {:timeout 150000}

  ; sign commits and tags
  :signing {:gpg-key &amp;quot;YYYYY&amp;quot;}

  ; additional source paths
  :source-paths &amp;#91;&amp;quot;dev/clj&amp;quot; &amp;quot;dev/cljs&amp;quot;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, some checks on code quality are always welcomed.&lt;/p&gt;&lt;p&gt;Profile:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:new-checks {:dependencies &amp;#91;&amp;#91;repetition-hunter               &amp;quot;1.0.0&amp;quot;&amp;#93;&amp;#93;
             :plugins &amp;#91;&amp;#91;jonase/eastwood                &amp;quot;0.2.3&amp;quot; :scope &amp;quot;test&amp;quot;&amp;#93;
                       &amp;#91;lein-bikeshed                  &amp;quot;0.2.0&amp;quot; :scope &amp;quot;test&amp;quot;&amp;#93;
                       &amp;#91;lein-cloverage                 &amp;quot;1.0.6&amp;quot; :scope &amp;quot;test&amp;quot;&amp;#93;
                       &amp;#91;lein-kibit                     &amp;quot;0.1.2&amp;quot; :scope &amp;quot;test&amp;quot;&amp;#93;
                       &amp;#91;lein-repetition-hunter         &amp;quot;0.1.0-SNAPSHOT&amp;quot;&amp;#93;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Usage:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;PROFILES=&amp;quot;with-profile +new-checks&amp;quot;
lein ${PROFILES} compile
lein ${PROFILES} bikeshed -m 80 &amp;amp;&amp;gt;&amp;gt; /tmp/bikeshed.txt
lein ${PROFILES} kibit --reporter markdown $&amp;#40;find . -iname '&amp;#42;.clj&amp;#42;'&amp;#41; &amp;amp;&amp;gt;&amp;gt; /tmp/kibit.md
lein ${PROFILES} eastwood '{:namespaces &amp;#91;:source-paths&amp;#93;}' | grep -v 'jar:file:/opt/m2&amp;#95;repo' &amp;amp;&amp;gt;&amp;gt; /tmp/eastwood.txt
lein ${PROFILES} repetition-hunter &amp;amp;&amp;gt;&amp;gt; /tmp/hunter.txt
lein ${PROFILES} cloverage
WORK&amp;#95;DIR=$&amp;#40;pwd&amp;#41;
# open coverage results in browser
google-chrome --incognito &amp;quot;file://${WORK&amp;#95;DIR}/target/coverage/index.html&amp;quot;
# open reports in Sublime-text
sublime-text /tmp/bikeshed.txt /tmp/kibit.md /tmp/eastwood.txt /tmp/hunter.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your productivity is now multiplied by 3.14&lt;/p&gt;
</description>
<pubDate>
Fri, 15 Jul 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2016-07-01-paypal/
</guid>
<link>
http://bleu-barbeau.com/posts/2016-07-01-paypal/
</link>
<title>
Paypal security upgrade
</title>
<description>
&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;&lt;p&gt;Paypal performs in 2016 several changes to the security level of their payment platform. We use their &lt;code&gt;'Express Checkout'&lt;/code&gt; method and therefore this security upgrade will be an opportunity for us to rewrite our library.&lt;/p&gt;&lt;p&gt;Deadlines have shifted, I guess for the same reasons than SEPA one: clients were not ready... (SEPA is Single Euro Payments Area)&lt;/p&gt;&lt;p&gt;Basically, there are three main changes:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Paypal certificate now uses the G5 root, with a SHA-256 key.   This implies the update of the truststore;&lt;/li&gt;&lt;li&gt;private merchants keys are upgraded from SHA-1 to SHA-256.   The keystore must therefore be updated (for the private key part),   as well as the truststore (for public part);&lt;/li&gt;&lt;li&gt;Finally, upgrade the TLS protocol to version 1.2,   which is not the default mode in Java 7.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;The first two changes are to be made on the stores of the sandbox and production environments.&lt;/p&gt;&lt;p&gt;No luck, PayPal has already updated their sandbox to TLS1.2, so it is no longer possible, without a compatible code, to use this test platform.&lt;/p&gt;&lt;p&gt;The hardest part when using Paypal is not to implement the technical solution:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;First, patience is required in order to find one's way in the doc,  sometimes redundant, often confused.&lt;/li&gt;&lt;li&gt;On the other hand, foresee a good headache with certificate formats  and conversions from PEM to pkcs12 to jks, ...&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To this end, a very good tool for the stores management is &lt;a href='http://www.keystore-explorer.org/' target='_blank'&gt;KeyStore Explorer&lt;/a&gt;, much more convenient than command line &lt;code&gt;keytool&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Last word about key/trust-stores: do not specify them when posting data to the API with signature credentials, or the following error will occur: &lt;code&gt;unable to find valid certification path to requested target&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The stores are not used in this case, but their presence in the options disrupts the connection.&lt;/p&gt;&lt;h2 id=&quot;express&amp;#95;checkout&amp;#95;api&amp;#95;operations&quot;&gt;Express Checkout API Operations&lt;/h2&gt;&lt;p&gt;Basically our thin Clojure library, called by our online shopping website, provides 3 methods that reflect those of Paypal's API:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;get-url-paypal&lt;/code&gt;: connects to Paypal EC and retrieves a token   used for a given sale transaction.   User is redirected to Paypal's url and invited to confirm the payment of   his purchase.&lt;/li&gt;&lt;li&gt;&lt;code&gt;do-confirmation&lt;/code&gt;: once the user has validated or cancelled the sale,   Paypal warns the merchant. By posting this 'confirmation', the merchant   gets the status of the transaction, and updates the system and data   accordingly.&lt;/li&gt;&lt;li&gt;&lt;code&gt;get-fee&lt;/code&gt;: if acknowledgment was &lt;code&gt;success&lt;/code&gt;, get the Paypal's final fee,   calculated with obscure maths.&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;tls1.2&quot;&gt;TLS1.2&lt;/h2&gt;&lt;p&gt;Our legacy is still running Java 1.7, but all new developments with Clojure use Java 1.8.&lt;/p&gt;&lt;p&gt;As a consequence, direct test within a REPL leads to false positive because jdk8's default TLS version is already compatible with the Paypal sandbox.&lt;/p&gt;&lt;p&gt;One can still use jdk8 to launch &lt;code&gt;lein repl&lt;/code&gt;, but version 7 must be forced for the project runtime.&lt;/p&gt;&lt;p&gt;Very easy, just add &lt;code&gt;:java-cmd &amp;quot;/opt/jdk7/bin/java&amp;quot;&lt;/code&gt; to the &lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;All posts to Paypal API will now end with the following exception: &lt;code&gt;javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake&amp;#95;failure&lt;/code&gt;.&lt;/p&gt;&lt;h3 id=&quot;connection&amp;#95;manager&quot;&gt;Connection manager&lt;/h3&gt;&lt;p&gt;We need to force the TLS protocol to use version 1.2 during our calls to Paypal's API with &lt;code&gt;dakrone/clj-http&lt;/code&gt; library.&lt;/p&gt;&lt;p&gt;Simply specify in the options of each POST a &lt;code&gt;:connection-manager&lt;/code&gt;. We choose to use a reusable one, based on a &lt;code&gt;PoolingHttpClientConnectionManager&lt;/code&gt; so its construction should be memoized.&lt;/p&gt;&lt;p&gt;In its definition, we specify &lt;code&gt;&amp;#40;.use Protocol&amp;quot; TLSv1.2 &amp;quot;&amp;#41;&lt;/code&gt; at the &lt;code&gt;SSLContext&lt;/code&gt; level and everything is now ok.&lt;/p&gt;&lt;p&gt;Calls are now made like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;client/post api-endpoint
             &amp;#40;merge &amp;#40;make-connection-manager&amp;#41;
                    {:form-params ...}
                    keystore-truststore&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;no&amp;#95;more&amp;#95;properties&amp;#95;files&quot;&gt;No more properties files&lt;/h2&gt;&lt;p&gt;Previously the connection settings were registered in java properties files, but since these settings are specific and not used in the legacy java code, we gain by integrating them directly into this small clojure library.&lt;/p&gt;&lt;p&gt;By doing this, one of the basic rules of &lt;a href='http://12factor.net/' target='_blank'&gt;12 factor app best practices&lt;/a&gt; is fulfilled.&lt;/p&gt;&lt;p&gt;The classic &lt;code&gt;weavejester/environ&lt;/code&gt; is used because the &lt;code&gt;tolitius/cprop&lt;/code&gt; solution seems a bit overkill in our case.&lt;/p&gt;&lt;p&gt;For the dev environment, the elements are set directly in the &lt;code&gt;project.clj&lt;/code&gt;, or, if one does not want to commit them, in a &lt;code&gt;profile.clj&lt;/code&gt; file, specific to the developer's machine.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;  ; in project's map
  :profiles {:dev
             {:env
              {:dev?             &amp;quot;true&amp;quot;
               :server-port      &amp;quot;8080&amp;quot;
               :base-url-wo-port &amp;quot;http://localhost&amp;quot;
               :api-username     &amp;quot;merchant&amp;#95;api1.mail.com&amp;quot;
               :api-password     &amp;quot;...&amp;quot;
               :api-signature    &amp;quot;...&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In production on the other hand, environment variables are used. It is preferable to Java system properties &lt;code&gt;-dXX&lt;/code&gt;, which are visible in the command line of the &lt;code&gt;tomcat/jetty/whatever&lt;/code&gt; process, so not very safe.&lt;/p&gt;&lt;p&gt;&lt;code&gt;environ&lt;/code&gt; comes with a plugin, &lt;code&gt;lein-environ&lt;/code&gt;, that generates a &lt;code&gt;.lein-env&lt;/code&gt; file, extracting the settings from the project map. This file will be used with &lt;code&gt;lein&lt;/code&gt; commands.&lt;/p&gt;&lt;p&gt;It's very useful but think to delete it for non-local tests, because it can interfere with the final configuration, obtained by overriding several sources.&lt;/p&gt;&lt;p&gt;For example the &lt;code&gt;:dev?&lt;/code&gt; property should not be present in staging or production environment. However as it is not explicitly set to &lt;code&gt;false&lt;/code&gt;, it will disrupt the config.&lt;/p&gt;&lt;p&gt;One last thing, the keys with compounds names should be written with &lt;code&gt;'-'&lt;/code&gt; rather than with &lt;code&gt;'.'&lt;/code&gt;. A kind message from &lt;code&gt;environ&lt;/code&gt; reminds that important detail because otherwise &lt;code&gt;nil&lt;/code&gt; values will be recovered...&lt;/p&gt;&lt;h2 id=&quot;invalid&amp;#95;cookie&quot;&gt;Invalid cookie&lt;/h2&gt;&lt;p&gt;A painful but harmless warning about &lt;code&gt;invalid 'expires' attribute&lt;/code&gt; in the cookie header is displayed on each post to the API.&lt;/p&gt;&lt;p&gt;To avoid this warning, it is required to import the &lt;code&gt;log4j/log4j&lt;/code&gt; dependency and to increase the alert level for the adequate logger.&lt;/p&gt;&lt;p&gt;Just write at the start of the namespace definition:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;.setLevel &amp;#40;Logger/getLogger &amp;quot;org.apache.http&amp;quot;&amp;#41; org.apache.log4j.Level/ERROR&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Can't wait for next update &lt;i class=&quot;fa fa-smile-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/p&gt;
</description>
<pubDate>
Fri, 01 Jul 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2016-05-27-switch-to-cryogen/
</guid>
<link>
http://bleu-barbeau.com/posts/2016-05-27-switch-to-cryogen/
</link>
<title>
Switch to Cryogen
</title>
<description>
&lt;p&gt;My blog was previously served by Jekyll, with a theme adapted from &lt;a href='https://github.com/mmistakes/so-simple-theme' target='_blank'&gt;So Simple&lt;/a&gt;. This suited me very well. Elegant layout, satisfactory responsive design, fast processing of pages.&lt;/p&gt;&lt;p&gt;But then, every time I wanted to write a quick post, at the time of starting Jenkins to heat up the receptacle of my prose, bing! a mismatch is detected between coffeescript / the Jekyll engine / its plugins / gem / bundle or whatever...&lt;/p&gt;&lt;p&gt;And here I am compelled to spend 20 minutes trying to update all of these elements instead of improving my English writing &amp;ndash; and my grammar deserves a good upgrade...&lt;/p&gt;&lt;p&gt;For a while I used a Docker container wrapping Jekyll and its plugins. It's an interesting experience, which has the advantage to freeze versions of tools required for the blog, while letting those of workstation freely evolve.&lt;/p&gt;&lt;p&gt;And then I have wondered: this is a blog about Clojure, why not use a blog engine that is made of it, and enables hosting on Github? And I quickly came across &lt;a href='https://github.com/cryogen-project/cryogen' target='_blank'&gt;Cryogen&lt;/a&gt;, a very good static website generator.&lt;/p&gt;&lt;p&gt;Everything is fine, however, I made two small changes to the &lt;code&gt;core&lt;/code&gt; project.&lt;/p&gt;&lt;p&gt;For this I use &lt;code&gt;intern&lt;/code&gt; function, which allows to change the root binding of a var in another namespace. This is a handy feature when you want to change a single function without cloning the entire project.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The first in the &lt;code&gt;compiler&lt;/code&gt; namespace, on the &lt;code&gt;add-prev-next&lt;/code&gt; function,  where I reversed the order of the previous and next pages  because I find it more logical to have the historical on the left.&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;intern 'cryogen-core.compiler
        &amp;#40;with-meta #&amp;#95;1 'add-prev-next
                   {:doc &amp;#40;str &amp;quot;Adds a :prev and :next key to the page/post&amp;quot;
                              &amp;quot; data containing the title and uri of the &amp;quot;
                              &amp;quot;prev/next post/page if it exists&amp;quot;&amp;#41;}&amp;#41;
        &amp;#40;fn
          &amp;#91;pages&amp;#93;
          &amp;#40;map &amp;#40;fn &amp;#91;&amp;#91;next target prev&amp;#93;&amp;#93; ; before: &amp;#91;prev target next&amp;#93;
                 &amp;#40;assoc target
                   :prev &amp;#40;if prev &amp;#40;select-keys prev &amp;#91;:title :uri&amp;#93;&amp;#41; nil&amp;#41;
                   :next &amp;#40;if next &amp;#40;select-keys next &amp;#91;:title :uri&amp;#93;&amp;#41; nil&amp;#41;&amp;#41;&amp;#41;
&lt;/li&gt;&lt;/ol&gt;               &amp;#40;partition 3 1 &amp;#40;flatten &amp;#91;nil pages nil&amp;#93;&amp;#41;&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &amp;#9312; &lt;code&gt;with-meta&lt;/code&gt; keeps the original docstring and attach it   to the function,   because it is not possible to do this in the &lt;code&gt;fn block &amp;#91;&amp;#93;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;2.The second in the &lt;code&gt;markup&lt;/code&gt; namespace, on the &lt;code&gt;rewrite-hrefs&lt;/code&gt; function,   where I open a new tab when &lt;code&gt;target&lt;/code&gt; is specified at the end of the link.   A little regex makes the substitution.&lt;/p&gt;&lt;p&gt;  &lt;script src=&quot;https://gist.github.com/obarbeau/65d7f487797d8041b6a79c15b532604f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;&lt;p&gt;Finally, the day you use &lt;code&gt;intern&lt;/code&gt; to define a macro, please remember:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;to add the meta &lt;code&gt;:macro true&lt;/code&gt; in the name of var&lt;/li&gt;&lt;li&gt;to add two arguments to your function, &lt;code&gt;&amp;amp;form&lt;/code&gt; and &lt;code&gt; env&lt;/code&gt;  (which are not required with &lt;code&gt;defmacro&lt;/code&gt;)  otherwise you might look for a moment why  the substitutions do not behave as expected...  &lt;i class=&quot;fa fa-smile-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;intern 'monger.query &amp;#40;with-meta 'with-collection {:macro true}&amp;#41;
        &amp;#40;fn &amp;#91;&amp;amp;form &amp;amp;env &amp;#94;DB db &amp;#94;String coll &amp;amp; body&amp;#93;
          `&amp;#40;let &amp;#91;coll# &amp;#126;coll
                 db# &amp;#126;db
                 db-coll# &amp;#40;if &amp;#40;string? coll#&amp;#41;
                            &amp;#40;.getCollection &amp;#94;DB db# &amp;#94;String coll#&amp;#41;
                            coll#&amp;#41;
                 query# &amp;#40;-&amp;gt; &amp;#40;empty-query db-coll#&amp;#41; &amp;#126;@body&amp;#41;&amp;#93;
             &amp;#40;exec query#&amp;#41;&amp;#41;&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Fri, 27 May 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2016-05-26-clojure-cheat-sheet/
</guid>
<link>
http://bleu-barbeau.com/posts/2016-05-26-clojure-cheat-sheet/
</link>
<title>
Clojure core functions - Cheat Sheet
</title>
<description>
&lt;p&gt;Here are some useful Clojure core functions along with examples  and MathML notation for fun.&lt;/p&gt;&lt;p&gt;Nothing new under the sun, but these notes had been dragging on for a long time in my drafts, so it was time to share them!&lt;/p&gt;&lt;p&gt;&lt;table style=&quot;border-spacing: 7px; border-collapse: separate;&quot;&gt; &lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;'a ⇔ &amp;#40;quote a&amp;#41;
&amp;#91;syntax quote&amp;#93; `a ⇔ &amp;#40;quote user/a&amp;#41;

;; Examples
&amp;#40;read-string &amp;quot;`{:a 100}&amp;quot;&amp;#41;
; =&amp;gt; {:a 100}
`&amp;#91;:a &amp;#126;&amp;#40;+ 1 1&amp;#41; &amp;#126;'c d &amp;#126;`e&amp;#93;
; =&amp;gt; &amp;#91;:a 2 c user/d user/e&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; &lt;code&gt;Syntax quoting&lt;/code&gt; brings optional &lt;code&gt;gensym&lt;/code&gt; (if &lt;code&gt;#&lt;/code&gt; at the end of var name.  Useful for macros that create local vars, eg in &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;loop&lt;/code&gt;) + namespace  qualification of symbols. Produces code to reproduce the form.  One can unquote inside a syntax-quoted form with the tilde &lt;code&gt;&amp;#126;&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;and arg &amp;#40;.method arg&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns &lt;code&gt;nil&lt;/code&gt; if arg is &lt;code&gt;nil&lt;/code&gt;, otherwise execute &lt;code&gt;method&lt;/code&gt; on arg.  Thus avoids &lt;code&gt;nil&lt;/code&gt; checks.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;apply f x1 ... xn c
→ &amp;#40;f x1 x2 ... c1 c2 ... cn&amp;#41;

;; Examples
&amp;#40;apply + 5 6 '&amp;#40;&amp;#41;&amp;#41; ; 11
&amp;#40;apply max &amp;#91;1 2 3&amp;#93;&amp;#41; ; 3
; but
&amp;#40;max &amp;#91;1 2 3&amp;#93;&amp;#41; ; &amp;#91;1 2 3&amp;#93;
&amp;#40;+ &amp;#91;1 2 3&amp;#93;&amp;#41; ; error
&amp;#40;apply + &amp;#91;1 2 3&amp;#93;&amp;#41; ; 6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Evaluates ƒ (must not be a macro) on &amp;#92;( x_n &amp;#92;) arguments prepended  to the collection.  Has similarities with &lt;code&gt;unquote splicing&lt;/code&gt; &lt;code&gt;&amp;#126;@&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;assoc map k 1 v1 ... k n v n
assoc vec idx1 v1 ... idxn vn

;; Examples
&amp;#40;assoc &amp;#91;1 2 4&amp;#93; 3 10 0 12&amp;#41;
; &amp;#91;12 2 4 10&amp;#93;
&amp;#40;assoc {:k1 &amp;quot;old v1&amp;quot; :k2 &amp;quot;v2&amp;quot;}
       :k1 &amp;quot;newv1&amp;quot; :k3 &amp;quot;v3&amp;quot;&amp;#41;
; {:k3 &amp;quot;v3&amp;quot;, :k1 &amp;quot;newv1&amp;quot;, :k2 &amp;quot;v2&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; &lt;ul&gt;&lt;li&gt;applied on a &lt;code&gt;map&lt;/code&gt;, returns a &lt;code&gt;map&lt;/code&gt; of the same type (hashed/sorted)  containing (or substituting) k/v of &lt;code&gt;map&lt;/code&gt; and (by) those specified.&lt;/li&gt; &lt;li&gt;applied on a &lt;code&gt;vector&lt;/code&gt;, replace the element at specified index or add it at  the last position.&lt;/li&gt;&lt;/ul&gt;   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;assoc-in map &amp;#91;k1 ... kn&amp;#93; v
assoc-in vec &amp;#91;k1 ... kn&amp;#93; v

;; Examples
&amp;#40;assoc-in &amp;#91;{:k1 &amp;quot;v1&amp;quot;} {:k2 &amp;quot;v2&amp;quot;}&amp;#93;
          &amp;#91;1 :k2&amp;#93; &amp;quot;nv2&amp;quot;&amp;#41;
; &amp;#91;{:k1 &amp;quot;v1&amp;quot;} {:k2 &amp;quot;nv2&amp;quot;}&amp;#93;
&amp;#40;assoc-in {} &amp;#91;:k1 :k2 :k3&amp;#93; &amp;quot;nv&amp;quot;&amp;#41;
; {:k1 {:k2 {:k3 &amp;quot;nv&amp;quot;}}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns the same type of associative structure, with v the value of nested key  reached by &amp;#92;( k1 .. kn &amp;#92;). If any &amp;#92;( k_x &amp;#92;) level does not exist,  hash-maps are created.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;bean java-object

;; Examples
&amp;#40;bean java.awt.Color/RED&amp;#41;
; {:red 255:transparency : 1 ...}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a &lt;code&gt;map&lt;/code&gt; with all getters of the java object.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;comp f1 f2 ... fn
→ &amp;#40;f 1 &amp;#40;f2 ... &amp;#40;fn &amp;#95;&amp;#41;&amp;#41;&amp;#41;

;; Examples
&amp;#40;&amp;#40;comp str +&amp;#41; 8 8 8&amp;#41; ; « 24 »

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a function with undefined arity, applying &amp;#92;( f_x &amp;#92;)  (from right to left) on arguments.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;concat x1 ... xn

;; Examples
&amp;#40;concat &amp;#91;:a :b&amp;#93; nil &amp;#91;1 &amp;#91;2 3&amp;#93; 4&amp;#93;&amp;#41;
; &amp;#40;:a :b 1 &amp;#91;2 3&amp;#93; 4&amp;#41;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence including all &amp;#92;( x_k &amp;#92;) elements.  Does not flatten nested colls.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;conj

;; Examples
; new element at the front
&amp;#40;conj '&amp;#40;1 2 3&amp;#41; :a&amp;#41; ; &amp;#40;:a 1 2 3&amp;#41;
; new element at the back
&amp;#40;conj &amp;#91;1 2 3&amp;#93; :a&amp;#41; ; &amp;#91;1 2 3 :a&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt;&lt;/p&gt;&lt;p&gt;  &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;constantly x

;; Examples
&amp;#40;constantly x&amp;#41; 1 2 3 → x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a function with undefined arity, that always results in x.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;contains? coll k

;; Examples
&amp;#40;contains? &amp;#91;1 2 3 4&amp;#93; 4&amp;#41;
; false ; index outOfBounds
&amp;#40;contains? &amp;#91;1 2 3 4&amp;#93; 0&amp;#41; ; true
&amp;#40;contains? '&amp;#40;1 2 3 4&amp;#41; 2&amp;#41;
; IllegalArgumentException
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns true if the &lt;strong&gt;key&lt;/strong&gt; k is present in the &lt;strong&gt;indexed&lt;/strong&gt; collection  (&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;), or if the index exists in a &lt;code&gt;vector&lt;/code&gt;.  Do not use with &lt;code&gt;list&lt;/code&gt;.  Prefer &lt;code&gt;some&lt;/code&gt; to query for a value.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;defrecord

;; Examples
&amp;#40;defrecord Foo &amp;#91;a b c&amp;#93;&amp;#41; ; user.Foo
&amp;#40;def f &amp;#40;Foo. 1 2 3&amp;#41;&amp;#41; ; #'user/f
&amp;#40;:b f&amp;#41; ; 2
&amp;#40;class f&amp;#41; ; user.Foo p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Optionally with implementation of protocols.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;dissoc map k1 ... kn

;; Examples
&amp;#40;dissoc {:fname &amp;quot;John&amp;quot; :lname &amp;quot;Doe&amp;quot;}
        :lname&amp;#41;
; {:fname &amp;quot;John&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Opposite of &lt;code&gt;assoc&lt;/code&gt;. Returns an associative structure  of the same type than &lt;code&gt;map&lt;/code&gt; but without the nested key reached  by &amp;#92;( k&amp;#95;1 \cdots k&amp;#95;n &amp;#92;)   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;doseq dorun doall
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Force evaluation of lazy seqs (side effects).  unlike &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;doseq&lt;/code&gt; never returns a value but &lt;code&gt;nil&lt;/code&gt;.  &lt;code&gt;doall &lt;/code&gt;retains the head and returns it.  &lt;code&gt;dorun&lt;/code&gt; does not retain the head and returns &lt;code&gt;nil&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;dotimes bindings &amp;amp; body

;; Examples
&amp;#40;dotimes &amp;#91;n 5&amp;#93; &amp;#40;println &amp;quot;n is&amp;quot; n&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Runs body &amp;#92;( n &amp;#92;) times, from &amp;#92;( 0 \text{ to } n-1 &amp;#92;).   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;find map k
find vec idx

;; Examples
&amp;#40;find {:b 2 :a 1 :c 3} :a&amp;#41; ; &amp;#91;:a 1&amp;#93;
&amp;#40;find &amp;#91;:a :b :c :d&amp;#93; 2&amp;#41; ; &amp;#91;2 :c&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;if &lt;code&gt;map&lt;/code&gt;, returns the map entry for key &amp;#92;( k &amp;#92;) or &lt;code&gt;nil&lt;/code&gt; if not found.&lt;/li&gt;&lt;li&gt;if &lt;code&gt;vector&lt;/code&gt;, returns entry for index &amp;#92;( idx &amp;#92;) or &lt;code&gt;nil&lt;/code&gt; if not found.  &lt;/td&gt;&lt;/tr&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;flatten

;; Examples
&amp;#40;flatten &amp;#91;1 &amp;#91;2 3 &amp;#91;4 5&amp;#93; 6&amp;#93;&amp;#93;&amp;#41;
; &amp;#40;1 2 3 4 5 6&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Flattens the nested sequences.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;fnil f x1 ... xn
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a function that calls ƒ with &amp;#92;( x_k &amp;#92;)  as an argument if the original argument is &lt;code&gt;nil&lt;/code&gt;.  The arity of ƒ must be &amp;#92;( \geq n &amp;#92;).   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;for &amp;#91;x valx
y valy
...
:let &amp;#91;z valz ...&amp;#93;
:while test
:when test&amp;#93;
body
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; « List comprehension ».  Returns a sequence containing the results of the execution of body.  Not intended for side effects.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;frequencies coll

;; Examples
&amp;#40;frequencies &amp;#91;'a 'b 'a 'a&amp;#93;&amp;#41;
; {a 3, b 1}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns with a &lt;code&gt;map&lt;/code&gt; that indicates, for each separate element of &lt;code&gt;col&lt;/code&gt;,  the frequency at with which it appears.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;group-by f coll

;; Examples
&amp;#40;group-by #&amp;#40;.length %&amp;#41;
  &amp;#91;&amp;quot;some&amp;quot; &amp;quot;words&amp;quot; &amp;quot;with&amp;quot;
  &amp;quot;different&amp;quot; &amp;quot;lengths&amp;quot;&amp;#93;&amp;#41;
; {4 &amp;#91;&amp;quot;some&amp;quot; &amp;quot;with&amp;quot;&amp;#93;, 5 &amp;#91;&amp;quot;words&amp;quot;&amp;#93;,
;  9 &amp;#91;&amp;quot;different&amp;quot;&amp;#93;, 7 &amp;#91;&amp;quot;lengths&amp;quot;&amp;#93;}

&amp;#40;group-by #&amp;#40;&amp;lt; % 10&amp;#41; &amp;#91;1 2 20 21&amp;#93;&amp;#41;
; {true &amp;#91;1 2&amp;#93; false &amp;#91;20 21&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a &lt;code&gt;map&lt;/code&gt; of &lt;code&gt;col&lt;/code&gt; elements, sorted by the return value of ƒ applied.  to them.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;interleave c1 ... cn

;; Examples
&amp;#40;interleave &amp;#91;:a :b&amp;#93; &amp;#40;iterate inc 1&amp;#41;&amp;#41;
; &amp;#40;:a 1 :b 2&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence containing the first element of each &amp;#92;( c_x &amp;#92;),  then the second, ...   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;interpose sep coll
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence of elements of the collection separated by the  &lt;code&gt;sep&lt;/code&gt; separator.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;into to from

;; Examples
&amp;#40;into {} &amp;#91;&amp;#91;1 2&amp;#93; &amp;#91;3 4&amp;#93;&amp;#93;&amp;#41;
; {1 2, 3 4}
&amp;#40;into &amp;#91;&amp;#93; {1 2, 3 4}&amp;#41;
; &amp;#91;&amp;#91;1 2&amp;#93; &amp;#91;3 4&amp;#93;&amp;#93;
&amp;#40;into &amp;#40;4&amp;#41; '&amp;#40;1 2 3&amp;#41;&amp;#41;
; &amp;#40;3 2 1 4&amp;#41;
&amp;#40;into '&amp;#40;1 2 3&amp;#41; '&amp;#40;:a :b :c&amp;#41;&amp;#41;
; &amp;#40;:c :b :a 1 2 3&amp;#41;
&amp;#40;into &amp;#91;1 2 3&amp;#93; &amp;#91;:a :b :c&amp;#93;&amp;#41;
; &amp;#91;1 2 3 :a :b :c&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a collection of the same type than &lt;code&gt;to&lt;/code&gt;, appending all elements of  collection &lt;code&gt;from&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;iterate f x
→ &amp;#40;x &amp;#40;f x&amp;#41; &amp;#40;f &amp;#40;f x&amp;#41;&amp;#41; ...&amp;#41;

;; Examples
&amp;#40;iterate #&amp;#40;∗ 2&amp;#41; 2&amp;#41;
; &amp;#40;2 4 8 16 ...&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; ƒ must be a pure function.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;juxt f 1 f2 ...
&amp;#40;juxt f1 f2 f3&amp;#41; x
→ &amp;#91;&amp;#40;f1 x&amp;#41; &amp;#40;f2 x&amp;#41; &amp;#40;f 3 x&amp;#41;&amp;#93;

;; Examples
&amp;#40;map &amp;#40;juxt second count&amp;#41;
     &amp;#91;'&amp;#40;2 3&amp;#41; '&amp;#40;5 6 9&amp;#41;&amp;#93;&amp;#41;
; &amp;#40;&amp;#91;3 2&amp;#93; &amp;#91;6 3&amp;#93;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a function that returns a &lt;code&gt;vector&lt;/code&gt; whose elements are the application  of ƒ on the argument.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;keep f coll
keep-indexed f coll

;; Examples
&amp;#40;keep #&amp;#40;when &amp;#40;odd? %&amp;#41; %&amp;#41; &amp;#40;range 10&amp;#41;&amp;#41;
; &amp;#40;1 3 5 7 9&amp;#41;
&amp;#40;map #&amp;#40;when &amp;#40;odd? %&amp;#41; %&amp;#41; &amp;#40;range 10&amp;#41;&amp;#41;
; &amp;#40;nil 1 nil 3 nil 5 nil 7 nil 9&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence made of non &lt;code&gt;nil&lt;/code&gt; results of the application of ƒ  on every &lt;code&gt;coll&lt;/code&gt; elements. &lt;code&gt;false&lt;/code&gt; results are included.  ƒ must be a pure function. &lt;code&gt;keep-indexed&lt;/code&gt; uses a function like &lt;code&gt;fn &amp;#91;idx v&amp;#93;&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;  &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;list x1 ... xn

;; Examples
'&amp;#40;a 2 3&amp;#41; ; &amp;#40;a 2 3&amp;#41;
&amp;#40;list a 2 3&amp;#41;
; Exception cannot resolve a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a &lt;code&gt;list&lt;/code&gt; containing all &amp;#92;( x_n &amp;#92;) args, possibly &lt;code&gt;nil&lt;/code&gt;.  Unlike literal notation list &lt;code&gt;'&amp;#40;...&amp;#41;&lt;/code&gt;,  the elements are evaluated before insertion.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;list&amp;#42; x1 ... xn s
→ &amp;#40;x1 ... xn s1 ... sn&amp;#41;
list&amp;#42; x1 ... xn nil
→ &amp;#40;x1 ... xn&amp;#41;
list&amp;#42; x1 ... xn &amp;#40;&amp;#41;
→ &amp;#40;x1 ... xn&amp;#41;

;; Examples
&amp;#40;list&amp;#42; 1 2 &amp;#91;3 4&amp;#93;&amp;#41;
; &amp;#40;1 2 3 4&amp;#41;
&amp;#40;list 1 2 &amp;#91;3 4&amp;#93;&amp;#41;
; &amp;#40;1 2 &amp;#91;3 4&amp;#93;&amp;#41;
&amp;#40;list&amp;#42; nil &amp;#91;1 2&amp;#93;&amp;#41; ; &amp;#40;nil 1 2&amp;#41;
&amp;#40;list&amp;#42; 1 nil&amp;#41; ; &amp;#40;1&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a &lt;code&gt;list&lt;/code&gt; containing all &amp;#92;( x_n &amp;#92;) args, possibly &lt;code&gt;nil&lt;/code&gt;, as well as  all elements of sequence s (if not empty and not &lt;code&gt;nil&lt;/code&gt;).   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#91;p&amp;#93;map f c1 c2 ...
→ &amp;#40;&amp;#40;f c11 c21 ...&amp;#41;
   &amp;#40;f c12 c22 ...&amp;#41; ...&amp;#41;

&amp;#91;p&amp;#93;map f c ; &amp;#40;&amp;#40;f c1&amp;#41; &amp;#40;f c2&amp;#41; ...&amp;#41;

&amp;#91;p&amp;#93; : means parallel

mapv f c1 c2 ...
→ &amp;#91;&amp;#40;f c1 1 c21 ...&amp;#41;
   &amp;#40;f c1 2 c22 ...&amp;#41; ...&amp;#93;

;; Examples
; 7 et 8 seront ignorés
map #&amp;#40;+ %%2%3&amp;#41; '&amp;#40;1 2 3&amp;#41;
    '&amp;#40;4 5 6 7 8&amp;#41; '&amp;#40;9 10 11&amp;#41;
; &amp;#40;14 17 20&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence containing results of the application of ƒ  on each first elements of every collections &amp;#92;( c_n &amp;#92;)  then on each second elements, ...  ƒ should have as many args as the number of collections.  If a collection has too many arguments they will be ignored.  With a single collection, &lt;code&gt;map&lt;/code&gt; applies the function on every elements.  &lt;code&gt;mapv &lt;/code&gt;: same thing but returns a &lt;code&gt;vector&lt;/code&gt; and is not lazy.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;mapcat f c1 ... cn
→ &amp;#40;concat &amp;#40;f c1&amp;#41; &amp;#40;f c2&amp;#41; ...&amp;#41;

;; Examples
&amp;#40;mapcat reverse &amp;#91;&amp;#91;3 2 1 0&amp;#93; &amp;#91;6 5 4&amp;#93;
                 &amp;#91;9 8 7&amp;#93;&amp;#93;&amp;#41;
; &amp;#40;0 1 2 3 4 5 6 7 8 9&amp;#41;
&amp;#40;mapcat list &amp;#91;:a :b :c&amp;#93; &amp;#91;1 2 3&amp;#93;&amp;#41;
; &amp;#40;:a 1 :b 2 :c 3&amp;#41;
&amp;#40;mapcat &amp;#40;fn &amp;#91;x&amp;#93; &amp;#40;repeat x x&amp;#41;&amp;#41; &amp;#91;12 3&amp;#93;&amp;#41;
; &amp;#40;1 2 2 3 3 3&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Equivalent to &lt;code&gt;&amp;#40;apply concat &amp;#40;map f c1 ... cn&amp;#41;&amp;#41;&lt;/code&gt;.  Applies &lt;code&gt;concat&lt;/code&gt; on the result of the application of &lt;code&gt;map&lt;/code&gt;  on ƒ and collections.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;memoize f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a cached version of ƒ. ƒ must be pure.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#94;{:doc ...}

;; Examples
&amp;#40;def &amp;#94;{:doc &amp;quot;a var&amp;quot;} x 10&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Alternate docstring. Metadata does not affect equality.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;or supplied-val default-val
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns &lt;code&gt;supplied-val&lt;/code&gt; if not &lt;code&gt;nil&lt;/code&gt;, otherwise &lt;code&gt;default-val&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;partial f x1 ... xn

;; Examples
#&amp;#40;+ 1 %&amp;#41; ⇔ &amp;#40;partial + 1&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a function that takes &amp;#92;( n &amp;#92;) less args that what ƒ requires.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;partition n coll
partition n step coll
partition n step pad coll

;; Examples
&amp;#40;partition 2 &amp;#91;1 2 3&amp;#93;&amp;#41; ; &amp;#40;&amp;#40;1 2&amp;#41;&amp;#41;
&amp;#40;partition 2 1 &amp;#40;repeat 0&amp;#41; &amp;#91;1 2 3&amp;#93;&amp;#41;
; &amp;#40;&amp;#40;1 2&amp;#41; &amp;#40;2 3&amp;#41; &amp;#40;3 0&amp;#41;&amp;#41;
&amp;#40;partition 2 1 &amp;#91;1 2 3&amp;#93;&amp;#41;
; &amp;#40;&amp;#40;1 2&amp;#41; &amp;#40;2 3&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a lazy sequence containing lists of &amp;#92;( n &amp;#92;) elements each.  If the final &lt;code&gt;list&lt;/code&gt; has less than &amp;#92;( n &amp;#92;) elements, it is not added,  except with &lt;code&gt;partition-all&lt;/code&gt; (see below).  The 'step', which is &amp;#92;( n &amp;#92;) by default, is the offset  for the creation of each list.  'Pad' is a list designed to complement the latest  if less than &amp;#92;( n &amp;#92;) elements.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;partition-all n coll

;; Examples
&amp;#40;partition-all 2 &amp;#91;1 2 3&amp;#93;&amp;#41;
; &amp;#40;&amp;#40;1 2&amp;#41; &amp;#40;3&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Similar to &lt;code&gt;partition&lt;/code&gt;, but also builds the last &lt;code&gt;list&lt;/code&gt; even if there  are less than &amp;#92;( n &amp;#92;) elements.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;partition-by f coll

;; Examples
&amp;#40;partition-by even? &amp;#91;1 2 3&amp;#93;&amp;#41;
; &amp;#40;&amp;#40;1&amp;#41; &amp;#40;2&amp;#41; &amp;#40;3&amp;#41;&amp;#41;
&amp;#40;partition-by &amp;#40;partial &amp;lt; 10&amp;#41;
              &amp;#91;1 2 11 1&amp;#93;&amp;#41;
; &amp;#40;&amp;#40;1 2&amp;#41; &amp;#40;11&amp;#41; &amp;#40;1&amp;#41;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Similar to &lt;code&gt;partition&lt;/code&gt;, but cut the list each times ƒ change its value.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;reduce f c
→ &amp;#40;f &amp;#40;f &amp;#40;f c1 c2&amp;#41; c3&amp;#41; c4&amp;#41; ...
; ƒ should have an arity without args
reduce f '&amp;#40;&amp;#41; → f
reduce f '&amp;#40;c1&amp;#41; → c1
reduce f val c
→ &amp;#40;f &amp;#40;f &amp;#40;f val c1&amp;#41; c2&amp;#41; c3&amp;#41; ...
reduce f val '&amp;#40;&amp;#41; → val
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; ƒ should have a 2 args arity, except when not used or indicated.  Returns the accumulator.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;reductions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence of intermediate steps of &lt;code&gt;reduce&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;repeatedly f → '&amp;#40;f f f ...&amp;#41;
repeatedly n f → '&amp;#40;f f f ... n&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; ƒ should have no args, possibly impure.  Returns an infinite sequence (or size n) of successive calls to ƒ.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;repeat x → '&amp;#40;x x x ...&amp;#41;
repeat n x → '&amp;#40;x x x ...n&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns an infinite sequence (or size n) of value x.  If x is a function, only one call is made.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;seq coll
sequencecoll

;; Examples
&amp;#40;seq {}&amp;#41; ou &amp;#40;seq nil&amp;#41; ; nil
&amp;#40;sequence {}&amp;#41; ou &amp;#40;sequence nil&amp;#41;
; &amp;#40;&amp;#41;
&amp;#40;sequence &amp;#91;1 2&amp;#93;&amp;#41; ou &amp;#40;seq &amp;#91;1 2&amp;#93;&amp;#41;
; &amp;#40;1 2&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sequence from the collection &lt;code&gt;coll&lt;/code&gt;.  For an &lt;code&gt;nil&lt;/code&gt; or empty collection, &lt;code&gt;seq&lt;/code&gt; and &lt;code&gt;sequence&lt;/code&gt; behave differently.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;sort coll
sort comp coll
sort-by keyfn coll
sort-by keyfn comp coll

;; Examples
&amp;#40;sort &amp;#91;1 56 2 23 45 34 6 43&amp;#93;&amp;#41;
; &amp;#40;1 2 6 23 34 43 45 56&amp;#41;
&amp;#40;sort &amp;gt; &amp;#91; 1 56 2 23 45 34 6 43&amp;#93;&amp;#41;
; &amp;#40;56 45 43 34 23 6 2 1&amp;#41;
&amp;#40;sort-by #&amp;#40;.length %&amp;#41;
         &amp;#91;&amp;quot;the&amp;quot; &amp;quot;quick&amp;quot;
          &amp;quot;brown&amp;quot; &amp;quot;fox&amp;quot;&amp;#93;&amp;#41;
; &amp;#40;&amp;quot;the&amp;quot; &amp;quot;fox&amp;quot; &amp;quot;quick&amp;quot; &amp;quot;brown&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a sorted sequence.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;split-at n coll

;; Examples
&amp;#40;split-at 2 &amp;#91;:a :b :c :d :e&amp;#93;&amp;#41;
; &amp;#91;&amp;#40;:a :b&amp;#41; &amp;#40;:c :d :e&amp;#41;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a vector of &lt;code&gt;&amp;#91;&amp;#40;take n coll&amp;#41; &amp;#40;drop n coll&amp;#41;&amp;#93;&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;split-with pred coll

;; Examples
&amp;#40;split-with &amp;#40;partial &amp;gt;= 3&amp;#41;
; &amp;#91;1 2 3 4 5&amp;#93;&amp;#41; &amp;#91;&amp;#40;1 2 3&amp;#41; &amp;#40;4 5&amp;#41;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a vector of &lt;code&gt;&amp;#91;&amp;#40;take-while pred coll&amp;#41; &amp;#40;drop-while pred coll&amp;#41;&amp;#93;&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;take-nth n c

;; Examples
&amp;#40;take-nth 3 '&amp;#40;2 5 9 6 8 9 10 11&amp;#41;&amp;#41;
; &amp;#40;2 6 10&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Takes the first and every nth elements of &lt;code&gt;c&lt;/code&gt;.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;take-while pred coll
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns elements of &lt;code&gt;coll&lt;/code&gt; as long as predicate &lt;code&gt;pred&lt;/code&gt; is true.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;tranpoline f &amp;amp; args
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Used for mutual recursion without consumming the stack.  Performs the ping pong as long as what is returned is a function.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;update-in map &amp;#91;k1 .. kn&amp;#93; f &amp;amp; args

;; Examples
&amp;#40;def jdoe {:name &amp;quot;John Doe&amp;quot;
           : address {:zip 41,...}}&amp;#41;
&amp;#40;update-in jdoe &amp;#91;:address :zip&amp;#93; inc&amp;#41;
; {:name &amp;quot;John Doe&amp;quot;
;  :address {:zip 42}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns an associative structure identical to  &lt;code&gt;map&lt;/code&gt; but with the value of the nested key reached by &amp;#92;( k&amp;#95;1 \cdots k&amp;#95;n &amp;#92;)   updated by ƒ (and its optional arguments).   If the &amp;#92;( k_x &amp;#92;) level does not exist, hash-maps will be created.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;vec c → &amp;#91;c1 c2 ...&amp;#93;
vec nil → &amp;#91;&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a &lt;code&gt;vector&lt;/code&gt; containing the elements of c.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;vector x1 x2 ... → &amp;#91;x1 x2 ...&amp;#93;
vector nil → &amp;#91;nil&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a vector containing all arguments &amp;#92;( x_\n &amp;#92;).   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;vector-of t
vector-of t &amp;amp; x1 ... xn

;; Examples
&amp;#40;conj &amp;#40;vector-of :int 4&amp;#41; 1 2 3&amp;#41;
; &amp;#91;4 1 2 3&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; Returns a &lt;code&gt;vector&lt;/code&gt; of primitive types (:int :long :float :double :byte  :short :char or :boolean) containing all optional &amp;#92;( x_\n &amp;#92;) arguments.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;zipmap keys vals → &amp;#40;k1 v1 ... kn vn&amp;#41;
zipmap &amp;#91;k1 k2&amp;#93; &amp;#91;v1&amp;#93; → &amp;#40;k1 v1&amp;#41;
zipmap &amp;#91;k&amp;#93; &amp;#91;v1 v2&amp;#93; → &amp;#40;k1 v1&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; return a &lt;code&gt;map&lt;/code&gt; with the keys associated with values.   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;tr&gt;   &lt;td&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;map first
     &amp;#40;filter &amp;#40;comp #{:a :b} first&amp;#41;
             &amp;#91;&amp;#91;:a&amp;#93; &amp;#91;:d&amp;#93;&amp;#93;&amp;#41;&amp;#41;
;=&amp;gt; &amp;#40;:a&amp;#41;
&amp;#40;keep &amp;#40;comp #{:a} first&amp;#41; &amp;#91;&amp;#91;:a&amp;#93; &amp;#91;:b&amp;#93;&amp;#93;&amp;#41;
;=&amp;gt; &amp;#40;:a&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;/td&gt;   &lt;td&gt; keep = map + filter   &lt;/td&gt; &lt;/tr&gt;&lt;/p&gt;&lt;p&gt;&lt;/table&gt;&lt;/p&gt;&lt;p&gt;Inspect a &lt;code&gt;map&lt;/code&gt; :&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;require 'clojure.inspector&amp;#41;
&amp;#40;clojure.inspector/inspect-tree map&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, some other useful functions, from the excellent &lt;a href='http://blog.jayfields.com/2012/09/replacing-common-code-with-clojureset.html' target='_blank'&gt;Jay Fields's blog&lt;/a&gt;.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;def jay {:fname &amp;quot;jay&amp;quot; :lname &amp;quot;fields&amp;quot; :employer &amp;quot;drw&amp;quot;}&amp;#41;
&amp;#40;def mike {:fname &amp;quot;mike&amp;quot; :lname &amp;quot;jones&amp;quot; :employer &amp;quot;forward&amp;quot;}&amp;#41;
&amp;#40;def john {:fname &amp;quot;john&amp;quot; :lname &amp;quot;dydo&amp;quot; :employer &amp;quot;drw&amp;quot;}&amp;#41;

; returns a map whose keys are every employers and values are people defined above
&amp;#40;clojure.set/index &amp;#91;jay mike john&amp;#93; &amp;#91;:employer&amp;#93;&amp;#41;
; =&amp;gt; {{:employer &amp;quot;drw&amp;quot;} #{{:employer &amp;quot;drw&amp;quot; :fname &amp;quot;jay&amp;quot; :lname &amp;quot;fields&amp;quot;}
;                         {:employer &amp;quot;drw&amp;quot; :fname &amp;quot;john&amp;quot; :lname &amp;quot;dydo&amp;quot;}}
; {:employer &amp;quot;forward&amp;quot;} #{{:employer &amp;quot;forward&amp;quot; :fname &amp;quot;mike&amp;quot; :lname &amp;quot;jones&amp;quot;}}}

; projection
&amp;#40;clojure.set/project &amp;#91;jay mike john&amp;#93; &amp;#91;:fname :lname&amp;#93;&amp;#41;
; =&amp;gt; #{{:lname &amp;quot;fields&amp;quot;, :fname &amp;quot;jay&amp;quot;}
;      {:lname &amp;quot;dydo&amp;quot;, :fname &amp;quot;john&amp;quot;}
;      {:lname &amp;quot;jones&amp;quot;, :fname &amp;quot;mike&amp;quot;}}

; key rename
&amp;#40;clojure.set/rename &amp;#91;jay mike john&amp;#93; {:fname :first-name :lname :last-name}&amp;#41;
; =&amp;gt; #{{:last-name &amp;quot;jones&amp;quot;, :first-name &amp;quot;mike&amp;quot;, :employer &amp;quot;forward&amp;quot;}
;      {:last-name &amp;quot;dydo&amp;quot;, :first-name &amp;quot;john&amp;quot;, :employer &amp;quot;drw&amp;quot;}
;      {:last-name &amp;quot;fields&amp;quot;, :first-name &amp;quot;jay&amp;quot;, :employer &amp;quot;drw&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;
</description>
<pubDate>
Thu, 26 May 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2015-02-18-clojure-plugins-tools/
</guid>
<link>
http://bleu-barbeau.com/posts/2015-02-18-clojure-plugins-tools/
</link>
<title>
Clojure - Plugins &amp; tools
</title>
<description>
&lt;p&gt;This is my modest contribution to the &lt;a href='https://github.com/technomancy/leiningen/wiki/Plugins' target='_blank'&gt;plugins universe&lt;/a&gt; of Leiningen. I synthesized here some of my observations and comments, as others have already done &lt;a href='http://jakemccrary.com/blog/2015/01/11/overview-of-my-leiningen-profiles-dot-clj/' target='_blank'&gt;here&lt;/a&gt; and &lt;a href='http://www.corfield.org/blog/post.cfm/insanely-useful-leiningen-plugins' target='_blank'&gt;there&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I highly recommand to try and adopt the following plugins and tools.&lt;/p&gt;&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;&lt;p&gt;There are two ways to add a plugin:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;globally in &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt;.  The plugin will be available for all projects.&lt;/li&gt;&lt;li&gt;For a particular project, in its &lt;code&gt;project.clj&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Keep in mind that all plugins specified in &lt;code&gt;profiles.clj&lt;/code&gt; and thus loaded at the same time than the REPL may interfere with it, because they affect the initial classpath, which is different from the project classpath.&lt;/p&gt;&lt;p&gt;&amp;#x2799; I recommend to add these plugins directly in projects (&lt;code&gt;project.clj&lt;/code&gt;) when required.&lt;/p&gt;&lt;h3 id=&quot;check&amp;#95;out&amp;#95;updates&quot;&gt;Check out updates&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;xsc/lein-ancient&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Check for outdated dependencies and plugins.&lt;/p&gt;&lt;p&gt;It can also update the &lt;code&gt;project.clj&lt;/code&gt; and &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; files, automatically or interactively.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;lein ancient &amp;#91;upgrade :interactive&amp;#93;

lein ancient &amp;#91;upgrade-&amp;#93;profiles
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;div class=&quot;alert alert-warning&quot;&gt; &lt;i class=&quot;fa fa-warning&quot;&gt;&lt;/i&gt; Warning! The plugin does not manage utf8 correctly, so data can be corrupted, for example if you have a special REPL prompt. &lt;/div&gt;&lt;/p&gt;&lt;h3 id=&quot;tests&amp;#95;and&amp;#95;benchmarks&quot;&gt;Tests and benchmarks&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;criterium&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Benchmarks.&lt;/p&gt;&lt;h4 id=&quot;'static&amp;#95;code&amp;#95;analyzers'&amp;#95;and&amp;#95;'clojure&amp;#95;lint&amp;#95;tools'&quot;&gt;'Static code analyzers' and 'Clojure lint tools'&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;jonase/kibit&lt;/code&gt;, &lt;code&gt;lein-bikeshed&lt;/code&gt;, &lt;code&gt;jonase/eastwood&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Kibit&lt;/code&gt; is written with &lt;code&gt;core.logic&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;A plugin for LightTable is also available: &lt;code&gt;danielribeiro/LightTableKibit&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-expectations&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Leiningen plugin for running tests written using the expectations library.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;pedandic&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A Leiningen plugin to reject dependency graphs with common user surprises. I can't get the v0.0.5 to work.&lt;/p&gt;&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;&lt;h4 id=&quot;consult&quot;&gt;Consult&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;clj-ns-browser.sdoc&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Displays in an external browser available docs for namespaces, functions, ...&lt;/p&gt;&lt;p&gt;Can be injected in the REPL with &lt;code&gt;im.chit/vinyasa&lt;/code&gt;.&lt;/p&gt;&lt;h4 id=&quot;generate&quot;&gt;Generate&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;gdeer81/lein-marginalia&lt;/code&gt; et &lt;code&gt;michaelblume/lein-marginalia&lt;/code&gt; (clj 1.7+)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Use &lt;code&gt;lein marg &amp;lt;options&amp;gt;&lt;/code&gt; in the project's root directory. Generates &lt;code&gt;docs/uberdoc.html&lt;/code&gt;. On the left of the page, text from comments and docstrings, on the right the Clojure code.&lt;/p&gt;&lt;p&gt;Markdown and asciidoc formats can be used in docstrings and in standards comments (must put two &lt;code&gt;;&lt;/code&gt; to enable).&lt;/p&gt;&lt;p&gt;You can also insert mathematical formulas. Put in the beginning of the clojure source:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;;; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;
;;  src=&amp;quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML&amp;#95;HTMLorMML&amp;quot;&amp;gt;
;; &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then use one of the two notations (inline or not):&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;\\&amp;#40;r&amp;#94;2 = x&amp;#94;2 + y&amp;#94;2\\&amp;#41;
or
$$r&amp;#94;2 = x&amp;#94;2 + y&amp;#94;2$$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This plugin does not work when the project's description is written as&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:description &amp;#40;str &amp;quot;xx&amp;quot;
                  &amp;quot;yy&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;codox&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Generating API documentation from Clojure source code. The default css is somewhat austere, blue text on gray background.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Cross Reference All the Things&lt;/em&gt; with &lt;code&gt;&amp;quot;Document &amp;#91;&amp;#91;module.submodule/var&amp;#93;&amp;#93;&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Hide Auto-Generated Record Constructors&lt;/em&gt; eg for records, with &lt;code&gt;MyRecord&lt;/code&gt;, we automatically get &lt;code&gt;-&amp;gt;MyRecord &amp;amp; map-&amp;gt;MyRecord&lt;/code&gt;. &lt;code&gt;&amp;#40;alter-meta! #'-&amp;gt;RecordName assoc :no-doc true&amp;#41;&lt;/code&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-autodoc&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Generates documentation for a project. The v0.9 does not work well with Leiningen 2 and the v1.0 is not yet published.&lt;/p&gt;&lt;h3 id=&quot;other&amp;#95;plugins&quot;&gt;Other plugins&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;clj-ns-browser&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Can be injected in the REPL with &lt;code&gt;im.chit/vinyasa&lt;/code&gt;. Launch a complete 'explorer' of functions and var available in the namespaces.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;clj-stacktrace&lt;/code&gt; and &lt;code&gt;io.aviso/pretty&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Nice exceptions with colorful stack trace. The stack from &lt;code&gt;aviso&lt;/code&gt; is easier to read than the one from &lt;code&gt;clj-stacktrace&lt;/code&gt;. The original &lt;code&gt;&amp;#40;pst&amp;#41;&lt;/code&gt; command can be overrided in a profile's injections.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;clojure.stacktrace/print-stack-trace &amp;#42;e&amp;#41;
or
&amp;#40;io.aviso.exception/write-exception &amp;#42;e&amp;#41;
or
&amp;#40;clj-stacktrace.repl/pst+&amp;#41;

to display last exception
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;im.chit/vinyasa&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Injects functions in namespaces. See &lt;a href=&quot;http://z.caudate.me/a-more-refined-vinyasa-inject&quot;&gt;http://z.caudate.me/a-more-refined-vinyasa-inject&lt;/a&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-autoreload&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Reloads modified sources (and thus namespaces) in the REPL. Does not work well with ClojureScript projects whose sources are in &lt;code&gt;src/clj&lt;/code&gt; and &lt;code&gt;src/cljs&lt;/code&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;emezeske/lein-cljsbuild&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Leiningen plugin to make ClojureScript development easy.&lt;/p&gt;&lt;p&gt;Mandatory for ClojureScript dev!&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;the-kenny/lein-deps-tree&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Prints a print a nicely formatted tree of a project's dependencies.&lt;/p&gt;&lt;p&gt;I do not really see the difference with the &lt;code&gt;lein deps: tree&lt;/code&gt; command. Maybe the way to retrieve dependencies (aether, other)?&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-light-nrepl&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Allows LightTable to communicate with an external REPL. Options can be specified (port, middleware, ...). Very useful, because I find the evaluation inside LightTable not very convenient for collections.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;marick/lein-midje&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Runs both Midje and clojure.test tests. Remark: &lt;code&gt;midje-auto&lt;/code&gt; do not autoreload &lt;code&gt;cljc&lt;/code&gt; files.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-ns-dep-graph&lt;/code&gt; et &lt;code&gt;ns-graph&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Both show the namespace dependencies of Clojure project sources as a graph. They use Graphviz.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-pdo&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Higher-order task to perform other tasks in parallel.&lt;/p&gt;&lt;p&gt;Several tasks can be launched with only one command, without interblocking.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;xeqi/lein-pedantic&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Reject dependency graphs with common user surprises.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-plz&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add Leiningen dependencies quickly to the &lt;code&gt;project.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;The dependencies can possibly be grouped into logical blocks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-pprint&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Pretty-print a representation of the project map.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;weavejester/lein-ring&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Manage &lt;code&gt;ring&lt;/code&gt; with command line: start and stop sever, generate uberwar, ...&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;lein ring uberwar # standalone version, directly in shell
lein ring war # for use with an app server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Options in the &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:ring {:handler try-atw-om.core/app
       :init try-atw-om.core/init}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then inside shell: &lt;code&gt;ring server-headless &amp;lt;port&amp;gt;&lt;/code&gt; (does not start a browser)&lt;/p&gt;&lt;p&gt;A jar file for standalone deployment can be packaged and started with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;lein ring uberjar; java -jar &amp;lt;project&amp;gt;-&amp;lt;version&amp;gt;-standalone.jar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A war file that will deploy into an existing tomcat with:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;lein ring war
or
lein ring uberwar ; all dependencies included
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-try&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To try libs without even creating a project.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;LonoCloud/lein-voom&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Helps you clean up your dependency tree.&lt;/p&gt;&lt;p&gt;Especially useful when you have snapshot versions.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;org.timmc/nephila&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Show a graph of your Clojure namespaces.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;slamhound&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;(Re)compute automatically requires and imports.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;slamhound&lt;/code&gt; alias is available for the shell but this tools can also be launched within a REPL:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;require '&amp;#91;slam.hound&amp;#93;&amp;#41;
&amp;#40;slam.hound/-main &amp;quot;src/my/namespace.clj&amp;quot;&amp;#41;
&amp;#40;slam.hound/-main &amp;quot;src&amp;quot;&amp;#41;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;aprint&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Improved &lt;code&gt;print&lt;/code&gt; display.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;taoensso.timbre&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Excellent logging library. Use &lt;code&gt;timbre&lt;/code&gt; rather than &lt;code&gt;&amp;#40;def ppr #'clojure.pprint/pprint&amp;#41;&lt;/code&gt;. The timbre config is shared amongst namespaces.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;daveray/seesaw&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;code&gt;Seesaw&lt;/code&gt; easily create everything you need for a Swing application.&lt;/p&gt;&lt;h2 id=&quot;standalone&amp;#95;scripts&quot;&gt;Standalone Scripts&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;lein-exec&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Add this profile the the &lt;code&gt;:user&lt;/code&gt; profile in your &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; config file.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;{:plugins &amp;#91;&amp;#91;lein-exec &amp;quot;0.3.1&amp;quot;&amp;#93;&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then &lt;code&gt;lein exec standalone.clj&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;With mini scripts &lt;code&gt;lein-exec&amp;#40;-p&amp;#41;&lt;/code&gt; it is possible to use &lt;code&gt;#!/bin/bash lein-exec&amp;#40;-p&amp;#41;&lt;/code&gt; directly in file's header.&lt;/p&gt;&lt;h2 id=&quot;boot&quot;&gt;Boot&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wget https://clojars.org/repo/tailrecursion/boot/1.1.1/boot-1.1.1.jar
mv boot-1.1.1.jar boot
chmod a+x boot
mv boot &amp;#126;/bin/boot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Better:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# install launch4j
# on the same partition than m2 repo, otherwise &amp;quot;Invalid cross-device link&amp;quot;
git clone https://github.com/boot-clj/boot-bin.git
# must use jdk7
cd boot-bin &amp;amp;&amp;amp; ./build.sh
# copy build/boot to /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Immutable File System -&gt; boot task -&gt; boot task2 -&gt; ...&lt;/p&gt;
</description>
<pubDate>
Wed, 18 Feb 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2015-02-09-uberjar-and-clojurescript/
</guid>
<link>
http://bleu-barbeau.com/posts/2015-02-09-uberjar-and-clojurescript/
</link>
<title>
Uberjar with ClojureScript
</title>
<description>
&lt;p&gt;Today I wanted to deploy a &lt;code&gt;ring&lt;/code&gt; project with a ClojureScript part.&lt;/p&gt;&lt;p&gt;Deployment is done with an uberjar, which I find effective. I use an additional directory to separate the sources, which are located in &lt;code&gt;src/clj/ns&lt;/code&gt; and &lt;code&gt;src/cljs/ns&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;So, during the compilation, &lt;code&gt;lein&lt;/code&gt; complains it could not locate the namespace:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;...FileNotFoundException: Could not locate ns/main&amp;#95;&amp;#95;init.class ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason is that the standard content of the &lt;code&gt;source-paths&lt;/code&gt; option, which is usually &lt;code&gt;src/ns&lt;/code&gt;, is no more suitable. So I changed the &lt;code&gt;uberjar&lt;/code&gt; profile in order to specify the different structure of the source directories.&lt;/p&gt;&lt;p&gt;Firstly, the &lt;code&gt;sources-level-down&lt;/code&gt; profile shown below replaces the standard content of the &lt;code&gt;source-paths&lt;/code&gt;. I found a tip on the Leiningen site to define profiles overrides. It therefore allows to include this kind of source paths only for projects with ClojureScript:&lt;/p&gt;&lt;p&gt;Once, in the &lt;code&gt;&amp;#126;/.lein/profiles.clj&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;:sources-level-down {:source-paths &amp;#94;:replace &amp;#91;&amp;quot;src/clj&amp;quot; &amp;quot;src/cljs&amp;quot;&amp;#93;}

:uberjar-common {:aot :all
                 &amp;lt;other options&amp;gt;}
:uberjar-additional {} ; nothing by default
:uberjar &amp;#91;:uberjar-common :uberjar-additional&amp;#93;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In every ClojureScript projects, in their &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;; overrides profile to include new `source-path` definition
:profiles {:uberjar-additional &amp;#91;:sources-level-down&amp;#93;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember that the JavaScript compilation will not be automatic during the uberjar build.&lt;/p&gt;&lt;p&gt;No doubt a hook can be added to the workflow, but in the meantime I recommend using &lt;a href='https://github.com/oakmac/cuttle' target='_blank'&gt;&lt;code&gt;cuttle&lt;/code&gt;&lt;/a&gt; defined itself as an &lt;i&gt;User Interface for the ClojureScript Compiler&lt;/i&gt;, to keep an eye on the JS compilation status.&lt;/p&gt;&lt;p&gt;Happy uberjar!&lt;/p&gt;
</description>
<pubDate>
Mon, 09 Feb 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2015-02-05-dashboard-part2/
</guid>
<link>
http://bleu-barbeau.com/posts/2015-02-05-dashboard-part2/
</link>
<title>
Dashboard, part 2
</title>
<description>
&lt;p&gt;After a break for more important projects, I'm back on the dashboard project. Since the first version was working fine, I decided to redo everything, according to a well-known principle in application development...&lt;/p&gt;&lt;p&gt;I replaced vanilla JavaScript by ClojureScript, and Ajax calls on &lt;code&gt;Compojure&lt;/code&gt; routes (to retrieve data) by &lt;code&gt;core.async&lt;/code&gt; on a &lt;code&gt;websocket&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;I had previously used on another project websockets with &lt;code&gt;httpkit&lt;/code&gt; and &lt;code&gt;webbitserver&lt;/code&gt;. It was working on two different ports, and management (and building) of websocket brought a lot of boilerplate.&lt;/p&gt;&lt;p&gt;It was also necessary to convert data to json with &lt;code&gt;cheshire&lt;/code&gt; on the server side and Javascript functions on the front side.&lt;/p&gt;&lt;p&gt;For websockets I started using &lt;a href='https://github.com/ptaoussanis/sente' target='_blank'&gt;sente&lt;/a&gt;, which seemed to meet my needs perfectly. This library is from the same author than the excellent logging library &lt;code&gt;timbre&lt;/code&gt;. Alas, a version conflicts and a recalcitrant macro prevented me from using it.&lt;/p&gt;&lt;p&gt;So I focused my attention on &lt;a href='https://github.com/james-henderson/chord' target='_blank'&gt;chord&lt;/a&gt;. Same core functionality than &lt;code&gt;sente&lt;/code&gt;. The merge with the Compojure routes is done with the &lt;code&gt;wrap-websocket-handler&lt;/code&gt; wrapper; the &lt;code&gt; transit&lt;/code&gt; format is default, so everything is perfect.&lt;/p&gt;&lt;p&gt;There's no need anymore to worry about the &lt;code&gt;onOpen&lt;/code&gt;, &lt;code&gt;onClose&lt;/code&gt; and &lt;code&gt;onMessage&lt;/code&gt; methods of the websocket, everything is automatic. It lets the user focus on data to transit the ws-channel, with &lt;code&gt;core.async&lt;/code&gt; &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;. And of course all is done without having to explicitly convert the data to json.&lt;/p&gt;&lt;p&gt;On the front side, I use &lt;a href='https://github.com/levand/domina' target='_blank'&gt;domina&lt;/a&gt;, which allows me to easily manipulate the elements of the page as well as events.&lt;/p&gt;
</description>
<pubDate>
Thu, 05 Feb 2015 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
http://bleu-barbeau.com/posts/2015-01-20-dashboard/
</guid>
<link>
http://bleu-barbeau.com/posts/2015-01-20-dashboard/
</link>
<title>
Dashboard
</title>
<description>
&lt;p&gt;Since three days I work on a dashboard that will display statistics in the form of tables and graphs.&lt;/p&gt;&lt;p&gt;I am using with great pleasure the following tools:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='https://github.com/ring-clojure/ring' target='_blank'&gt;ring&lt;/a&gt; for the server,&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/weavejester/compojure' target='_blank'&gt;compojure&lt;/a&gt; for the  routing,&lt;/li&gt;&lt;li&gt;&lt;a href='https://github.com/weavejester/hiccup' target='_blank'&gt;hiccup&lt;/a&gt; for dynamic generation of html pages,&lt;/li&gt;&lt;li&gt;also &lt;a href='https://github.com/mbossenbroek/simple-time' target='_blank'&gt;simple-time&lt;/a&gt; for handling dates,  I found it to be more lightweight and concise as  &lt;a href='https://github.com/clj-time/clj-time' target='_blank'&gt;clj-time&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Thanks to the &lt;code&gt;ring.middleware.reload&lt;/code&gt; middleware and the tip which is to set in ring the compojure's routes as a var quote (&lt;code&gt;#'app-routes&lt;/code&gt;), every modification made in the code is taken into account without the need to reload the namespace in the REPL.&lt;/p&gt;&lt;p&gt;I have not yet chosen between Dimple.js and Epoch for the display part.&lt;/p&gt;&lt;p&gt;Finally, &lt;a href='https://github.com/joegallo/doric' target='_blank'&gt;&lt;code&gt;doric&lt;/code&gt;&lt;/a&gt; helps me to show my data in chart form in the REPL, which is appreciable.&lt;/p&gt;&lt;p&gt;Of course the IDE I use is &lt;a href='http://lighttable.com/' target='_blank'&gt;Light Table&lt;/a&gt;, a must :-)&lt;/p&gt;
</description>
<pubDate>
Tue, 20 Jan 2015 00:00:00 +0100
</pubDate>
</item>
</channel>
</rss>
